'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace WSSNeoTel
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private authenticationValueField As Authentication
        
        Private Dessilenciar_ParticipanteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveRemoteImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIpCountryCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask00OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask01OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask02OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask03OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask04OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask05OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask06OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask07OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask08OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask09OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask10OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask11OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask12OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask13OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask14OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask15OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask16OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask17OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask18OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask19OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteTask20OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddHostExceptionTelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveHostExceptionTelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddInternetExceptionTelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveInternetExceptionTelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddHostExceptionWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveHostExceptionWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddInternetExceptionWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveInternetExceptionWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReloadBlockedIncomingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReloadBlockedOutgoingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Device_InsertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Device_UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Device_DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIdiomaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private User_InsertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private User_UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private User_DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private User_ChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private User_HasLicenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Update_CallerID_CampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Update_CampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PauseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnpauseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Login_CampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Logout_CampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRM_AvailableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRM_UnavailableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRM_ShowingContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HangupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartMonitorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StopMonitorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AttendedTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BlindTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AttendedTransferQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BlindTransferQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BlindTransferCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private JoinConferenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InviteParticipantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelInvitationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDTMFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KickAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KickParticipantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MuteAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MuteParticipantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnmuteAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnmuteParticipantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScreenApplicationStartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScreenApplicationStopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScreenStreamStartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScreenStreamCloseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScreenRecordStartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScreenRecordStopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScreenPacketReceivedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Login_Campaign2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddScheduleCallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DescansoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Tiempo_AdministrativoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Login_CampañaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Logout_CampañaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRM_DisponibleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRM_No_DisponibleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRM_Mostrando_ContactoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRM_Mostrando_Contacto_CRM_InternoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DiscarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CortarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Iniciar_GrabacionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Detener_GrabacionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PosicionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Expulsar_TodosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Expulsar_ParticipanteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Silenciar_TodosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Silenciar_ParticipanteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Dessilenciar_TodosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.APP_850.My.MySettings.Default.APP_WSSNeoTel_WebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property AuthenticationValue() As Authentication
            Get
                Return Me.authenticationValueField
            End Get
            Set
                Me.authenticationValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event Dessilenciar_ParticipanteCompleted As Dessilenciar_ParticipanteCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveRemoteImageCompleted As SaveRemoteImageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIpCountryCodeCompleted As GetIpCountryCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask00Completed As ExecuteTask00CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask01Completed As ExecuteTask01CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask02Completed As ExecuteTask02CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask03Completed As ExecuteTask03CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask04Completed As ExecuteTask04CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask05Completed As ExecuteTask05CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask06Completed As ExecuteTask06CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask07Completed As ExecuteTask07CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask08Completed As ExecuteTask08CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask09Completed As ExecuteTask09CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask10Completed As ExecuteTask10CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask11Completed As ExecuteTask11CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask12Completed As ExecuteTask12CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask13Completed As ExecuteTask13CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask14Completed As ExecuteTask14CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask15Completed As ExecuteTask15CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask16Completed As ExecuteTask16CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask17Completed As ExecuteTask17CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask18Completed As ExecuteTask18CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask19Completed As ExecuteTask19CompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteTask20Completed As ExecuteTask20CompletedEventHandler
        
        '''<remarks/>
        Public Event AddHostExceptionTelCompleted As AddHostExceptionTelCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveHostExceptionTelCompleted As RemoveHostExceptionTelCompletedEventHandler
        
        '''<remarks/>
        Public Event AddInternetExceptionTelCompleted As AddInternetExceptionTelCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveInternetExceptionTelCompleted As RemoveInternetExceptionTelCompletedEventHandler
        
        '''<remarks/>
        Public Event AddHostExceptionWebCompleted As AddHostExceptionWebCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveHostExceptionWebCompleted As RemoveHostExceptionWebCompletedEventHandler
        
        '''<remarks/>
        Public Event AddInternetExceptionWebCompleted As AddInternetExceptionWebCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveInternetExceptionWebCompleted As RemoveInternetExceptionWebCompletedEventHandler
        
        '''<remarks/>
        Public Event ReloadBlockedIncomingCompleted As ReloadBlockedIncomingCompletedEventHandler
        
        '''<remarks/>
        Public Event ReloadBlockedOutgoingCompleted As ReloadBlockedOutgoingCompletedEventHandler
        
        '''<remarks/>
        Public Event Device_InsertCompleted As Device_InsertCompletedEventHandler
        
        '''<remarks/>
        Public Event Device_UpdateCompleted As Device_UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event Device_DeleteCompleted As Device_DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIdiomaCompleted As CheckIdiomaCompletedEventHandler
        
        '''<remarks/>
        Public Event User_InsertCompleted As User_InsertCompletedEventHandler
        
        '''<remarks/>
        Public Event User_UpdateCompleted As User_UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event User_DeleteCompleted As User_DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event User_ChangePasswordCompleted As User_ChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event User_HasLicenseCompleted As User_HasLicenseCompletedEventHandler
        
        '''<remarks/>
        Public Event Update_CallerID_CampaignCompleted As Update_CallerID_CampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event Update_CampaignCompleted As Update_CampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event LogoutCompleted As LogoutCompletedEventHandler
        
        '''<remarks/>
        Public Event PauseCompleted As PauseCompletedEventHandler
        
        '''<remarks/>
        Public Event UnpauseCompleted As UnpauseCompletedEventHandler
        
        '''<remarks/>
        Public Event Login_CampaignCompleted As Login_CampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event Logout_CampaignCompleted As Logout_CampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event CRM_AvailableCompleted As CRM_AvailableCompletedEventHandler
        
        '''<remarks/>
        Public Event CRM_UnavailableCompleted As CRM_UnavailableCompletedEventHandler
        
        '''<remarks/>
        Public Event CRM_ShowingContactCompleted As CRM_ShowingContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DialCompleted As DialCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactCompleted As UpdateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event HangupCompleted As HangupCompletedEventHandler
        
        '''<remarks/>
        Public Event StartMonitorCompleted As StartMonitorCompletedEventHandler
        
        '''<remarks/>
        Public Event StopMonitorCompleted As StopMonitorCompletedEventHandler
        
        '''<remarks/>
        Public Event AttendedTransferCompleted As AttendedTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event BlindTransferCompleted As BlindTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event AttendedTransferQueueCompleted As AttendedTransferQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event BlindTransferQueueCompleted As BlindTransferQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event BlindTransferCampaignCompleted As BlindTransferCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event JoinConferenceCompleted As JoinConferenceCompletedEventHandler
        
        '''<remarks/>
        Public Event InviteParticipantCompleted As InviteParticipantCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelInvitationCompleted As CancelInvitationCompletedEventHandler
        
        '''<remarks/>
        Public Event SendDTMFCompleted As SendDTMFCompletedEventHandler
        
        '''<remarks/>
        Public Event PositionCompleted As PositionCompletedEventHandler
        
        '''<remarks/>
        Public Event KickAllCompleted As KickAllCompletedEventHandler
        
        '''<remarks/>
        Public Event KickParticipantCompleted As KickParticipantCompletedEventHandler
        
        '''<remarks/>
        Public Event MuteAllCompleted As MuteAllCompletedEventHandler
        
        '''<remarks/>
        Public Event MuteParticipantCompleted As MuteParticipantCompletedEventHandler
        
        '''<remarks/>
        Public Event UnmuteAllCompleted As UnmuteAllCompletedEventHandler
        
        '''<remarks/>
        Public Event UnmuteParticipantCompleted As UnmuteParticipantCompletedEventHandler
        
        '''<remarks/>
        Public Event ScreenApplicationStartCompleted As ScreenApplicationStartCompletedEventHandler
        
        '''<remarks/>
        Public Event ScreenApplicationStopCompleted As ScreenApplicationStopCompletedEventHandler
        
        '''<remarks/>
        Public Event ScreenStreamStartCompleted As ScreenStreamStartCompletedEventHandler
        
        '''<remarks/>
        Public Event ScreenStreamCloseCompleted As ScreenStreamCloseCompletedEventHandler
        
        '''<remarks/>
        Public Event ScreenRecordStartCompleted As ScreenRecordStartCompletedEventHandler
        
        '''<remarks/>
        Public Event ScreenRecordStopCompleted As ScreenRecordStopCompletedEventHandler
        
        '''<remarks/>
        Public Event ScreenPacketReceivedCompleted As ScreenPacketReceivedCompletedEventHandler
        
        '''<remarks/>
        Public Event Login_Campaign2Completed As Login_Campaign2CompletedEventHandler
        
        '''<remarks/>
        Public Event AddScheduleCallCompleted As AddScheduleCallCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseContactCompleted As CloseContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DescansoCompleted As DescansoCompletedEventHandler
        
        '''<remarks/>
        Public Event Tiempo_AdministrativoCompleted As Tiempo_AdministrativoCompletedEventHandler
        
        '''<remarks/>
        Public Event Login_CampañaCompleted As Login_CampañaCompletedEventHandler
        
        '''<remarks/>
        Public Event Logout_CampañaCompleted As Logout_CampañaCompletedEventHandler
        
        '''<remarks/>
        Public Event CRM_DisponibleCompleted As CRM_DisponibleCompletedEventHandler
        
        '''<remarks/>
        Public Event CRM_No_DisponibleCompleted As CRM_No_DisponibleCompletedEventHandler
        
        '''<remarks/>
        Public Event CRM_Mostrando_ContactoCompleted As CRM_Mostrando_ContactoCompletedEventHandler
        
        '''<remarks/>
        Public Event CRM_Mostrando_Contacto_CRM_InternoCompleted As CRM_Mostrando_Contacto_CRM_InternoCompletedEventHandler
        
        '''<remarks/>
        Public Event DiscarCompleted As DiscarCompletedEventHandler
        
        '''<remarks/>
        Public Event CortarCompleted As CortarCompletedEventHandler
        
        '''<remarks/>
        Public Event Iniciar_GrabacionCompleted As Iniciar_GrabacionCompletedEventHandler
        
        '''<remarks/>
        Public Event Detener_GrabacionCompleted As Detener_GrabacionCompletedEventHandler
        
        '''<remarks/>
        Public Event PosicionCompleted As PosicionCompletedEventHandler
        
        '''<remarks/>
        Public Event Expulsar_TodosCompleted As Expulsar_TodosCompletedEventHandler
        
        '''<remarks/>
        Public Event Expulsar_ParticipanteCompleted As Expulsar_ParticipanteCompletedEventHandler
        
        '''<remarks/>
        Public Event Silenciar_TodosCompleted As Silenciar_TodosCompletedEventHandler
        
        '''<remarks/>
        Public Event Silenciar_ParticipanteCompleted As Silenciar_ParticipanteCompletedEventHandler
        
        '''<remarks/>
        Public Event Dessilenciar_TodosCompleted As Dessilenciar_TodosCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Dessilenciar_Participante", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Dessilenciar_Participante(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Invoke("Dessilenciar_Participante", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Dessilenciar_ParticipanteAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Dessilenciar_ParticipanteAsync(USUARIO, CONFERENCIA, PARTICIPANTE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Dessilenciar_ParticipanteAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer, ByVal userState As Object)
            If (Me.Dessilenciar_ParticipanteOperationCompleted Is Nothing) Then
                Me.Dessilenciar_ParticipanteOperationCompleted = AddressOf Me.OnDessilenciar_ParticipanteOperationCompleted
            End If
            Me.InvokeAsync("Dessilenciar_Participante", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE}, Me.Dessilenciar_ParticipanteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDessilenciar_ParticipanteOperationCompleted(ByVal arg As Object)
            If (Not (Me.Dessilenciar_ParticipanteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Dessilenciar_ParticipanteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveRemoteImage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SaveRemoteImage(ByVal imageUrl As String, ByVal localPath As String)
            Me.Invoke("SaveRemoteImage", New Object() {imageUrl, localPath})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveRemoteImageAsync(ByVal imageUrl As String, ByVal localPath As String)
            Me.SaveRemoteImageAsync(imageUrl, localPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveRemoteImageAsync(ByVal imageUrl As String, ByVal localPath As String, ByVal userState As Object)
            If (Me.SaveRemoteImageOperationCompleted Is Nothing) Then
                Me.SaveRemoteImageOperationCompleted = AddressOf Me.OnSaveRemoteImageOperationCompleted
            End If
            Me.InvokeAsync("SaveRemoteImage", New Object() {imageUrl, localPath}, Me.SaveRemoteImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveRemoteImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveRemoteImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveRemoteImageCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIpCountryCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIpCountryCode(ByVal ip As String) As String
            Dim results() As Object = Me.Invoke("GetIpCountryCode", New Object() {ip})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIpCountryCodeAsync(ByVal ip As String)
            Me.GetIpCountryCodeAsync(ip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIpCountryCodeAsync(ByVal ip As String, ByVal userState As Object)
            If (Me.GetIpCountryCodeOperationCompleted Is Nothing) Then
                Me.GetIpCountryCodeOperationCompleted = AddressOf Me.OnGetIpCountryCodeOperationCompleted
            End If
            Me.InvokeAsync("GetIpCountryCode", New Object() {ip}, Me.GetIpCountryCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIpCountryCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIpCountryCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIpCountryCodeCompleted(Me, New GetIpCountryCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask00", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask00(ByVal idTask As Integer) As String
            Dim results() As Object = Me.Invoke("ExecuteTask00", New Object() {idTask})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask00Async(ByVal idTask As Integer)
            Me.ExecuteTask00Async(idTask, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask00Async(ByVal idTask As Integer, ByVal userState As Object)
            If (Me.ExecuteTask00OperationCompleted Is Nothing) Then
                Me.ExecuteTask00OperationCompleted = AddressOf Me.OnExecuteTask00OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask00", New Object() {idTask}, Me.ExecuteTask00OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask00OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask00CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask00Completed(Me, New ExecuteTask00CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask01", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask01(ByVal idTask As Integer, ByVal param1 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask01", New Object() {idTask, param1})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask01Async(ByVal idTask As Integer, ByVal param1 As String)
            Me.ExecuteTask01Async(idTask, param1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask01Async(ByVal idTask As Integer, ByVal param1 As String, ByVal userState As Object)
            If (Me.ExecuteTask01OperationCompleted Is Nothing) Then
                Me.ExecuteTask01OperationCompleted = AddressOf Me.OnExecuteTask01OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask01", New Object() {idTask, param1}, Me.ExecuteTask01OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask01OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask01CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask01Completed(Me, New ExecuteTask01CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask02", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask02(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask02", New Object() {idTask, param1, param2})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask02Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String)
            Me.ExecuteTask02Async(idTask, param1, param2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask02Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal userState As Object)
            If (Me.ExecuteTask02OperationCompleted Is Nothing) Then
                Me.ExecuteTask02OperationCompleted = AddressOf Me.OnExecuteTask02OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask02", New Object() {idTask, param1, param2}, Me.ExecuteTask02OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask02OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask02CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask02Completed(Me, New ExecuteTask02CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask03", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask03(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask03", New Object() {idTask, param1, param2, param3})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask03Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String)
            Me.ExecuteTask03Async(idTask, param1, param2, param3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask03Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal userState As Object)
            If (Me.ExecuteTask03OperationCompleted Is Nothing) Then
                Me.ExecuteTask03OperationCompleted = AddressOf Me.OnExecuteTask03OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask03", New Object() {idTask, param1, param2, param3}, Me.ExecuteTask03OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask03OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask03CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask03Completed(Me, New ExecuteTask03CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask04", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask04(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask04", New Object() {idTask, param1, param2, param3, param4})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask04Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String)
            Me.ExecuteTask04Async(idTask, param1, param2, param3, param4, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask04Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal userState As Object)
            If (Me.ExecuteTask04OperationCompleted Is Nothing) Then
                Me.ExecuteTask04OperationCompleted = AddressOf Me.OnExecuteTask04OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask04", New Object() {idTask, param1, param2, param3, param4}, Me.ExecuteTask04OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask04OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask04CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask04Completed(Me, New ExecuteTask04CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask05", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask05(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask05", New Object() {idTask, param1, param2, param3, param4, param5})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask05Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String)
            Me.ExecuteTask05Async(idTask, param1, param2, param3, param4, param5, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask05Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal userState As Object)
            If (Me.ExecuteTask05OperationCompleted Is Nothing) Then
                Me.ExecuteTask05OperationCompleted = AddressOf Me.OnExecuteTask05OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask05", New Object() {idTask, param1, param2, param3, param4, param5}, Me.ExecuteTask05OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask05OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask05CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask05Completed(Me, New ExecuteTask05CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask06", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask06(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask06", New Object() {idTask, param1, param2, param3, param4, param5, param6})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask06Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String)
            Me.ExecuteTask06Async(idTask, param1, param2, param3, param4, param5, param6, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask06Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal userState As Object)
            If (Me.ExecuteTask06OperationCompleted Is Nothing) Then
                Me.ExecuteTask06OperationCompleted = AddressOf Me.OnExecuteTask06OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask06", New Object() {idTask, param1, param2, param3, param4, param5, param6}, Me.ExecuteTask06OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask06OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask06CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask06Completed(Me, New ExecuteTask06CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask07", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask07(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask07", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask07Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String)
            Me.ExecuteTask07Async(idTask, param1, param2, param3, param4, param5, param6, param7, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask07Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal userState As Object)
            If (Me.ExecuteTask07OperationCompleted Is Nothing) Then
                Me.ExecuteTask07OperationCompleted = AddressOf Me.OnExecuteTask07OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask07", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7}, Me.ExecuteTask07OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask07OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask07CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask07Completed(Me, New ExecuteTask07CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask08", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask08(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask08", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask08Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String)
            Me.ExecuteTask08Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask08Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal userState As Object)
            If (Me.ExecuteTask08OperationCompleted Is Nothing) Then
                Me.ExecuteTask08OperationCompleted = AddressOf Me.OnExecuteTask08OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask08", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8}, Me.ExecuteTask08OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask08OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask08CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask08Completed(Me, New ExecuteTask08CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask09", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask09(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask09", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask09Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String)
            Me.ExecuteTask09Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask09Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal userState As Object)
            If (Me.ExecuteTask09OperationCompleted Is Nothing) Then
                Me.ExecuteTask09OperationCompleted = AddressOf Me.OnExecuteTask09OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask09", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9}, Me.ExecuteTask09OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask09OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask09CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask09Completed(Me, New ExecuteTask09CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask10", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask10(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask10", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask10Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String)
            Me.ExecuteTask10Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask10Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal userState As Object)
            If (Me.ExecuteTask10OperationCompleted Is Nothing) Then
                Me.ExecuteTask10OperationCompleted = AddressOf Me.OnExecuteTask10OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask10", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10}, Me.ExecuteTask10OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask10OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask10CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask10Completed(Me, New ExecuteTask10CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask11", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask11(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask11", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask11Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String)
            Me.ExecuteTask11Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask11Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal userState As Object)
            If (Me.ExecuteTask11OperationCompleted Is Nothing) Then
                Me.ExecuteTask11OperationCompleted = AddressOf Me.OnExecuteTask11OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask11", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11}, Me.ExecuteTask11OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask11OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask11CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask11Completed(Me, New ExecuteTask11CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask12", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask12(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask12", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask12Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String)
            Me.ExecuteTask12Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask12Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String, ByVal userState As Object)
            If (Me.ExecuteTask12OperationCompleted Is Nothing) Then
                Me.ExecuteTask12OperationCompleted = AddressOf Me.OnExecuteTask12OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask12", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12}, Me.ExecuteTask12OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask12OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask12CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask12Completed(Me, New ExecuteTask12CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask13", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask13(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String, ByVal param13 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask13", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask13Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String, ByVal param13 As String)
            Me.ExecuteTask13Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask13Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String, ByVal param13 As String, ByVal userState As Object)
            If (Me.ExecuteTask13OperationCompleted Is Nothing) Then
                Me.ExecuteTask13OperationCompleted = AddressOf Me.OnExecuteTask13OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask13", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13}, Me.ExecuteTask13OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask13OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask13CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask13Completed(Me, New ExecuteTask13CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask14", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask14(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String, ByVal param13 As String, ByVal param14 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask14", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask14Async(ByVal idTask As Integer, ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String, ByVal param13 As String, ByVal param14 As String)
            Me.ExecuteTask14Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask14Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal userState As Object)
            If (Me.ExecuteTask14OperationCompleted Is Nothing) Then
                Me.ExecuteTask14OperationCompleted = AddressOf Me.OnExecuteTask14OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask14", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14}, Me.ExecuteTask14OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask14OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask14CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask14Completed(Me, New ExecuteTask14CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask15", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask15( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask15", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask15Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String)
            Me.ExecuteTask15Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask15Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal userState As Object)
            If (Me.ExecuteTask15OperationCompleted Is Nothing) Then
                Me.ExecuteTask15OperationCompleted = AddressOf Me.OnExecuteTask15OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask15", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15}, Me.ExecuteTask15OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask15OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask15CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask15Completed(Me, New ExecuteTask15CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask16", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask16( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask16", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask16Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String)
            Me.ExecuteTask16Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask16Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal userState As Object)
            If (Me.ExecuteTask16OperationCompleted Is Nothing) Then
                Me.ExecuteTask16OperationCompleted = AddressOf Me.OnExecuteTask16OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask16", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16}, Me.ExecuteTask16OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask16OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask16CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask16Completed(Me, New ExecuteTask16CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask17", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask17( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask17", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask17Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String)
            Me.ExecuteTask17Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask17Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal userState As Object)
            If (Me.ExecuteTask17OperationCompleted Is Nothing) Then
                Me.ExecuteTask17OperationCompleted = AddressOf Me.OnExecuteTask17OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask17", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17}, Me.ExecuteTask17OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask17OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask17CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask17Completed(Me, New ExecuteTask17CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask18", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask18( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask18", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask18Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String)
            Me.ExecuteTask18Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask18Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String,  _
                    ByVal userState As Object)
            If (Me.ExecuteTask18OperationCompleted Is Nothing) Then
                Me.ExecuteTask18OperationCompleted = AddressOf Me.OnExecuteTask18OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask18", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18}, Me.ExecuteTask18OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask18OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask18CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask18Completed(Me, New ExecuteTask18CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask19", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask19( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String,  _
                    ByVal param19 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask19", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask19Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String,  _
                    ByVal param19 As String)
            Me.ExecuteTask19Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask19Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String,  _
                    ByVal param19 As String,  _
                    ByVal userState As Object)
            If (Me.ExecuteTask19OperationCompleted Is Nothing) Then
                Me.ExecuteTask19OperationCompleted = AddressOf Me.OnExecuteTask19OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask19", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19}, Me.ExecuteTask19OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask19OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask19CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask19Completed(Me, New ExecuteTask19CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTask20", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteTask20( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String,  _
                    ByVal param19 As String,  _
                    ByVal param20 As String) As String
            Dim results() As Object = Me.Invoke("ExecuteTask20", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask20Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String,  _
                    ByVal param19 As String,  _
                    ByVal param20 As String)
            Me.ExecuteTask20Async(idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteTask20Async( _
                    ByVal idTask As Integer,  _
                    ByVal param1 As String,  _
                    ByVal param2 As String,  _
                    ByVal param3 As String,  _
                    ByVal param4 As String,  _
                    ByVal param5 As String,  _
                    ByVal param6 As String,  _
                    ByVal param7 As String,  _
                    ByVal param8 As String,  _
                    ByVal param9 As String,  _
                    ByVal param10 As String,  _
                    ByVal param11 As String,  _
                    ByVal param12 As String,  _
                    ByVal param13 As String,  _
                    ByVal param14 As String,  _
                    ByVal param15 As String,  _
                    ByVal param16 As String,  _
                    ByVal param17 As String,  _
                    ByVal param18 As String,  _
                    ByVal param19 As String,  _
                    ByVal param20 As String,  _
                    ByVal userState As Object)
            If (Me.ExecuteTask20OperationCompleted Is Nothing) Then
                Me.ExecuteTask20OperationCompleted = AddressOf Me.OnExecuteTask20OperationCompleted
            End If
            Me.InvokeAsync("ExecuteTask20", New Object() {idTask, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20}, Me.ExecuteTask20OperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteTask20OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteTask20CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteTask20Completed(Me, New ExecuteTask20CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddHostExceptionTel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddHostExceptionTel(ByVal HOST As String)
            Me.Invoke("AddHostExceptionTel", New Object() {HOST})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddHostExceptionTelAsync(ByVal HOST As String)
            Me.AddHostExceptionTelAsync(HOST, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddHostExceptionTelAsync(ByVal HOST As String, ByVal userState As Object)
            If (Me.AddHostExceptionTelOperationCompleted Is Nothing) Then
                Me.AddHostExceptionTelOperationCompleted = AddressOf Me.OnAddHostExceptionTelOperationCompleted
            End If
            Me.InvokeAsync("AddHostExceptionTel", New Object() {HOST}, Me.AddHostExceptionTelOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddHostExceptionTelOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddHostExceptionTelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddHostExceptionTelCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveHostExceptionTel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveHostExceptionTel(ByVal HOST As String)
            Me.Invoke("RemoveHostExceptionTel", New Object() {HOST})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveHostExceptionTelAsync(ByVal HOST As String)
            Me.RemoveHostExceptionTelAsync(HOST, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveHostExceptionTelAsync(ByVal HOST As String, ByVal userState As Object)
            If (Me.RemoveHostExceptionTelOperationCompleted Is Nothing) Then
                Me.RemoveHostExceptionTelOperationCompleted = AddressOf Me.OnRemoveHostExceptionTelOperationCompleted
            End If
            Me.InvokeAsync("RemoveHostExceptionTel", New Object() {HOST}, Me.RemoveHostExceptionTelOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveHostExceptionTelOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveHostExceptionTelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveHostExceptionTelCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddInternetExceptionTel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddInternetExceptionTel()
            Me.Invoke("AddInternetExceptionTel", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInternetExceptionTelAsync()
            Me.AddInternetExceptionTelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInternetExceptionTelAsync(ByVal userState As Object)
            If (Me.AddInternetExceptionTelOperationCompleted Is Nothing) Then
                Me.AddInternetExceptionTelOperationCompleted = AddressOf Me.OnAddInternetExceptionTelOperationCompleted
            End If
            Me.InvokeAsync("AddInternetExceptionTel", New Object(-1) {}, Me.AddInternetExceptionTelOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddInternetExceptionTelOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddInternetExceptionTelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddInternetExceptionTelCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveInternetExceptionTel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveInternetExceptionTel()
            Me.Invoke("RemoveInternetExceptionTel", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveInternetExceptionTelAsync()
            Me.RemoveInternetExceptionTelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveInternetExceptionTelAsync(ByVal userState As Object)
            If (Me.RemoveInternetExceptionTelOperationCompleted Is Nothing) Then
                Me.RemoveInternetExceptionTelOperationCompleted = AddressOf Me.OnRemoveInternetExceptionTelOperationCompleted
            End If
            Me.InvokeAsync("RemoveInternetExceptionTel", New Object(-1) {}, Me.RemoveInternetExceptionTelOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveInternetExceptionTelOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveInternetExceptionTelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveInternetExceptionTelCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddHostExceptionWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddHostExceptionWeb(ByVal HOST As String)
            Me.Invoke("AddHostExceptionWeb", New Object() {HOST})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddHostExceptionWebAsync(ByVal HOST As String)
            Me.AddHostExceptionWebAsync(HOST, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddHostExceptionWebAsync(ByVal HOST As String, ByVal userState As Object)
            If (Me.AddHostExceptionWebOperationCompleted Is Nothing) Then
                Me.AddHostExceptionWebOperationCompleted = AddressOf Me.OnAddHostExceptionWebOperationCompleted
            End If
            Me.InvokeAsync("AddHostExceptionWeb", New Object() {HOST}, Me.AddHostExceptionWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddHostExceptionWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddHostExceptionWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddHostExceptionWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveHostExceptionWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveHostExceptionWeb(ByVal HOST As String)
            Me.Invoke("RemoveHostExceptionWeb", New Object() {HOST})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveHostExceptionWebAsync(ByVal HOST As String)
            Me.RemoveHostExceptionWebAsync(HOST, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveHostExceptionWebAsync(ByVal HOST As String, ByVal userState As Object)
            If (Me.RemoveHostExceptionWebOperationCompleted Is Nothing) Then
                Me.RemoveHostExceptionWebOperationCompleted = AddressOf Me.OnRemoveHostExceptionWebOperationCompleted
            End If
            Me.InvokeAsync("RemoveHostExceptionWeb", New Object() {HOST}, Me.RemoveHostExceptionWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveHostExceptionWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveHostExceptionWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveHostExceptionWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddInternetExceptionWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddInternetExceptionWeb()
            Me.Invoke("AddInternetExceptionWeb", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInternetExceptionWebAsync()
            Me.AddInternetExceptionWebAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInternetExceptionWebAsync(ByVal userState As Object)
            If (Me.AddInternetExceptionWebOperationCompleted Is Nothing) Then
                Me.AddInternetExceptionWebOperationCompleted = AddressOf Me.OnAddInternetExceptionWebOperationCompleted
            End If
            Me.InvokeAsync("AddInternetExceptionWeb", New Object(-1) {}, Me.AddInternetExceptionWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddInternetExceptionWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddInternetExceptionWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddInternetExceptionWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveInternetExceptionWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveInternetExceptionWeb()
            Me.Invoke("RemoveInternetExceptionWeb", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveInternetExceptionWebAsync()
            Me.RemoveInternetExceptionWebAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveInternetExceptionWebAsync(ByVal userState As Object)
            If (Me.RemoveInternetExceptionWebOperationCompleted Is Nothing) Then
                Me.RemoveInternetExceptionWebOperationCompleted = AddressOf Me.OnRemoveInternetExceptionWebOperationCompleted
            End If
            Me.InvokeAsync("RemoveInternetExceptionWeb", New Object(-1) {}, Me.RemoveInternetExceptionWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveInternetExceptionWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveInternetExceptionWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveInternetExceptionWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReloadBlockedIncoming", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ReloadBlockedIncoming()
            Me.Invoke("ReloadBlockedIncoming", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReloadBlockedIncomingAsync()
            Me.ReloadBlockedIncomingAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReloadBlockedIncomingAsync(ByVal userState As Object)
            If (Me.ReloadBlockedIncomingOperationCompleted Is Nothing) Then
                Me.ReloadBlockedIncomingOperationCompleted = AddressOf Me.OnReloadBlockedIncomingOperationCompleted
            End If
            Me.InvokeAsync("ReloadBlockedIncoming", New Object(-1) {}, Me.ReloadBlockedIncomingOperationCompleted, userState)
        End Sub
        
        Private Sub OnReloadBlockedIncomingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReloadBlockedIncomingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReloadBlockedIncomingCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReloadBlockedOutgoing", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ReloadBlockedOutgoing()
            Me.Invoke("ReloadBlockedOutgoing", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReloadBlockedOutgoingAsync()
            Me.ReloadBlockedOutgoingAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReloadBlockedOutgoingAsync(ByVal userState As Object)
            If (Me.ReloadBlockedOutgoingOperationCompleted Is Nothing) Then
                Me.ReloadBlockedOutgoingOperationCompleted = AddressOf Me.OnReloadBlockedOutgoingOperationCompleted
            End If
            Me.InvokeAsync("ReloadBlockedOutgoing", New Object(-1) {}, Me.ReloadBlockedOutgoingOperationCompleted, userState)
        End Sub
        
        Private Sub OnReloadBlockedOutgoingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReloadBlockedOutgoingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReloadBlockedOutgoingCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Device_Insert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Device_Insert( _
                    ByVal CLIENTE As String,  _
                    ByVal DEVICE As String,  _
                    ByVal CLAVE As String,  _
                    ByVal FECHA_EXPIRACION As Date,  _
                    ByVal CONFIGURACION As String,  _
                    ByVal ENABLED As Boolean,  _
                    ByVal CANALES_MAX As Integer,  _
                    ByVal TASA_DISCADO_MAXIMA As Integer,  _
                    ByVal TIPO_ASTERISK As String,  _
                    ByVal TIPO_NEOTEL As String,  _
                    ByVal PROVEEDOR As String,  _
                    ByVal EXTRAER As Integer,  _
                    ByVal ANTEPONER As String,  _
                    ByVal CALLERID_DEFAULT As String,  _
                    ByVal CALLERID_RANGE As String,  _
                    ByVal DESCRIPCION As String)
            Me.Invoke("Device_Insert", New Object() {CLIENTE, DEVICE, CLAVE, FECHA_EXPIRACION, CONFIGURACION, ENABLED, CANALES_MAX, TASA_DISCADO_MAXIMA, TIPO_ASTERISK, TIPO_NEOTEL, PROVEEDOR, EXTRAER, ANTEPONER, CALLERID_DEFAULT, CALLERID_RANGE, DESCRIPCION})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Device_InsertAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal DEVICE As String,  _
                    ByVal CLAVE As String,  _
                    ByVal FECHA_EXPIRACION As Date,  _
                    ByVal CONFIGURACION As String,  _
                    ByVal ENABLED As Boolean,  _
                    ByVal CANALES_MAX As Integer,  _
                    ByVal TASA_DISCADO_MAXIMA As Integer,  _
                    ByVal TIPO_ASTERISK As String,  _
                    ByVal TIPO_NEOTEL As String,  _
                    ByVal PROVEEDOR As String,  _
                    ByVal EXTRAER As Integer,  _
                    ByVal ANTEPONER As String,  _
                    ByVal CALLERID_DEFAULT As String,  _
                    ByVal CALLERID_RANGE As String,  _
                    ByVal DESCRIPCION As String)
            Me.Device_InsertAsync(CLIENTE, DEVICE, CLAVE, FECHA_EXPIRACION, CONFIGURACION, ENABLED, CANALES_MAX, TASA_DISCADO_MAXIMA, TIPO_ASTERISK, TIPO_NEOTEL, PROVEEDOR, EXTRAER, ANTEPONER, CALLERID_DEFAULT, CALLERID_RANGE, DESCRIPCION, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Device_InsertAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal DEVICE As String,  _
                    ByVal CLAVE As String,  _
                    ByVal FECHA_EXPIRACION As Date,  _
                    ByVal CONFIGURACION As String,  _
                    ByVal ENABLED As Boolean,  _
                    ByVal CANALES_MAX As Integer,  _
                    ByVal TASA_DISCADO_MAXIMA As Integer,  _
                    ByVal TIPO_ASTERISK As String,  _
                    ByVal TIPO_NEOTEL As String,  _
                    ByVal PROVEEDOR As String,  _
                    ByVal EXTRAER As Integer,  _
                    ByVal ANTEPONER As String,  _
                    ByVal CALLERID_DEFAULT As String,  _
                    ByVal CALLERID_RANGE As String,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal userState As Object)
            If (Me.Device_InsertOperationCompleted Is Nothing) Then
                Me.Device_InsertOperationCompleted = AddressOf Me.OnDevice_InsertOperationCompleted
            End If
            Me.InvokeAsync("Device_Insert", New Object() {CLIENTE, DEVICE, CLAVE, FECHA_EXPIRACION, CONFIGURACION, ENABLED, CANALES_MAX, TASA_DISCADO_MAXIMA, TIPO_ASTERISK, TIPO_NEOTEL, PROVEEDOR, EXTRAER, ANTEPONER, CALLERID_DEFAULT, CALLERID_RANGE, DESCRIPCION}, Me.Device_InsertOperationCompleted, userState)
        End Sub
        
        Private Sub OnDevice_InsertOperationCompleted(ByVal arg As Object)
            If (Not (Me.Device_InsertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Device_InsertCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Device_Update", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Device_Update( _
                    ByVal CLIENTE As String,  _
                    ByVal DEVICE As String,  _
                    ByVal CLAVE As String,  _
                    ByVal FECHA_EXPIRACION As Date,  _
                    ByVal CONFIGURACION As String,  _
                    ByVal ENABLED As Boolean,  _
                    ByVal CANALES_MAX As Integer,  _
                    ByVal TASA_DISCADO_MAXIMA As Integer,  _
                    ByVal TIPO_ASTERISK As String,  _
                    ByVal TIPO_NEOTEL As String,  _
                    ByVal PROVEEDOR As String,  _
                    ByVal EXTRAER As Integer,  _
                    ByVal ANTEPONER As String,  _
                    ByVal CALLERID_DEFAULT As String,  _
                    ByVal CALLERID_RANGE As String,  _
                    ByVal DESCRIPCION As String)
            Me.Invoke("Device_Update", New Object() {CLIENTE, DEVICE, CLAVE, FECHA_EXPIRACION, CONFIGURACION, ENABLED, CANALES_MAX, TASA_DISCADO_MAXIMA, TIPO_ASTERISK, TIPO_NEOTEL, PROVEEDOR, EXTRAER, ANTEPONER, CALLERID_DEFAULT, CALLERID_RANGE, DESCRIPCION})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Device_UpdateAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal DEVICE As String,  _
                    ByVal CLAVE As String,  _
                    ByVal FECHA_EXPIRACION As Date,  _
                    ByVal CONFIGURACION As String,  _
                    ByVal ENABLED As Boolean,  _
                    ByVal CANALES_MAX As Integer,  _
                    ByVal TASA_DISCADO_MAXIMA As Integer,  _
                    ByVal TIPO_ASTERISK As String,  _
                    ByVal TIPO_NEOTEL As String,  _
                    ByVal PROVEEDOR As String,  _
                    ByVal EXTRAER As Integer,  _
                    ByVal ANTEPONER As String,  _
                    ByVal CALLERID_DEFAULT As String,  _
                    ByVal CALLERID_RANGE As String,  _
                    ByVal DESCRIPCION As String)
            Me.Device_UpdateAsync(CLIENTE, DEVICE, CLAVE, FECHA_EXPIRACION, CONFIGURACION, ENABLED, CANALES_MAX, TASA_DISCADO_MAXIMA, TIPO_ASTERISK, TIPO_NEOTEL, PROVEEDOR, EXTRAER, ANTEPONER, CALLERID_DEFAULT, CALLERID_RANGE, DESCRIPCION, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Device_UpdateAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal DEVICE As String,  _
                    ByVal CLAVE As String,  _
                    ByVal FECHA_EXPIRACION As Date,  _
                    ByVal CONFIGURACION As String,  _
                    ByVal ENABLED As Boolean,  _
                    ByVal CANALES_MAX As Integer,  _
                    ByVal TASA_DISCADO_MAXIMA As Integer,  _
                    ByVal TIPO_ASTERISK As String,  _
                    ByVal TIPO_NEOTEL As String,  _
                    ByVal PROVEEDOR As String,  _
                    ByVal EXTRAER As Integer,  _
                    ByVal ANTEPONER As String,  _
                    ByVal CALLERID_DEFAULT As String,  _
                    ByVal CALLERID_RANGE As String,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal userState As Object)
            If (Me.Device_UpdateOperationCompleted Is Nothing) Then
                Me.Device_UpdateOperationCompleted = AddressOf Me.OnDevice_UpdateOperationCompleted
            End If
            Me.InvokeAsync("Device_Update", New Object() {CLIENTE, DEVICE, CLAVE, FECHA_EXPIRACION, CONFIGURACION, ENABLED, CANALES_MAX, TASA_DISCADO_MAXIMA, TIPO_ASTERISK, TIPO_NEOTEL, PROVEEDOR, EXTRAER, ANTEPONER, CALLERID_DEFAULT, CALLERID_RANGE, DESCRIPCION}, Me.Device_UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnDevice_UpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.Device_UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Device_UpdateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Device_Delete", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Device_Delete(ByVal CLIENTE As String, ByVal DEVICE As String)
            Me.Invoke("Device_Delete", New Object() {CLIENTE, DEVICE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Device_DeleteAsync(ByVal CLIENTE As String, ByVal DEVICE As String)
            Me.Device_DeleteAsync(CLIENTE, DEVICE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Device_DeleteAsync(ByVal CLIENTE As String, ByVal DEVICE As String, ByVal userState As Object)
            If (Me.Device_DeleteOperationCompleted Is Nothing) Then
                Me.Device_DeleteOperationCompleted = AddressOf Me.OnDevice_DeleteOperationCompleted
            End If
            Me.InvokeAsync("Device_Delete", New Object() {CLIENTE, DEVICE}, Me.Device_DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDevice_DeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.Device_DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Device_DeleteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckIdioma", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIdioma() As String
            Dim results() As Object = Me.Invoke("CheckIdioma", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIdiomaAsync()
            Me.CheckIdiomaAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIdiomaAsync(ByVal userState As Object)
            If (Me.CheckIdiomaOperationCompleted Is Nothing) Then
                Me.CheckIdiomaOperationCompleted = AddressOf Me.OnCheckIdiomaOperationCompleted
            End If
            Me.InvokeAsync("CheckIdioma", New Object(-1) {}, Me.CheckIdiomaOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIdiomaOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIdiomaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIdiomaCompleted(Me, New CheckIdiomaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/User_Insert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub User_Insert( _
                    ByVal CLIENTE As String,  _
                    ByVal USUARIO As String,  _
                    ByVal CLAVE As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRABA_CONVERSACION As Boolean,  _
                    ByVal DETECTA_PALABRAS As Boolean,  _
                    ByVal EMAIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal APELLIDO As String,  _
                    ByVal CAMBIA_CLAVE_PROX_LOGIN As Boolean,  _
                    ByVal SAL_CALLERID_PRESENTATION As Integer,  _
                    ByVal SAL_CALLERID As String,  _
                    ByVal SAL_RUTA As Integer,  _
                    ByVal SAL_PRECIO As Integer,  _
                    ByVal ENT_DNIS As String,  _
                    ByVal ENT_TIMEOUT As Integer,  _
                    ByVal ENT_LOCUCION As Integer,  _
                    ByVal FECHA_ALTA As Date,  _
                    ByVal DOMICILIO As String,  _
                    ByVal LOCALIDAD As String,  _
                    ByVal DNI As String,  _
                    ByVal IDPERFIL As Integer,  _
                    ByVal VERIFICA_PERMISOS As String)
            Me.Invoke("User_Insert", New Object() {CLIENTE, USUARIO, CLAVE, TIPO, GRABA_CONVERSACION, DETECTA_PALABRAS, EMAIL, TELEFONO, NOMBRE, APELLIDO, CAMBIA_CLAVE_PROX_LOGIN, SAL_CALLERID_PRESENTATION, SAL_CALLERID, SAL_RUTA, SAL_PRECIO, ENT_DNIS, ENT_TIMEOUT, ENT_LOCUCION, FECHA_ALTA, DOMICILIO, LOCALIDAD, DNI, IDPERFIL, VERIFICA_PERMISOS})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_InsertAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal USUARIO As String,  _
                    ByVal CLAVE As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRABA_CONVERSACION As Boolean,  _
                    ByVal DETECTA_PALABRAS As Boolean,  _
                    ByVal EMAIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal APELLIDO As String,  _
                    ByVal CAMBIA_CLAVE_PROX_LOGIN As Boolean,  _
                    ByVal SAL_CALLERID_PRESENTATION As Integer,  _
                    ByVal SAL_CALLERID As String,  _
                    ByVal SAL_RUTA As Integer,  _
                    ByVal SAL_PRECIO As Integer,  _
                    ByVal ENT_DNIS As String,  _
                    ByVal ENT_TIMEOUT As Integer,  _
                    ByVal ENT_LOCUCION As Integer,  _
                    ByVal FECHA_ALTA As Date,  _
                    ByVal DOMICILIO As String,  _
                    ByVal LOCALIDAD As String,  _
                    ByVal DNI As String,  _
                    ByVal IDPERFIL As Integer,  _
                    ByVal VERIFICA_PERMISOS As String)
            Me.User_InsertAsync(CLIENTE, USUARIO, CLAVE, TIPO, GRABA_CONVERSACION, DETECTA_PALABRAS, EMAIL, TELEFONO, NOMBRE, APELLIDO, CAMBIA_CLAVE_PROX_LOGIN, SAL_CALLERID_PRESENTATION, SAL_CALLERID, SAL_RUTA, SAL_PRECIO, ENT_DNIS, ENT_TIMEOUT, ENT_LOCUCION, FECHA_ALTA, DOMICILIO, LOCALIDAD, DNI, IDPERFIL, VERIFICA_PERMISOS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_InsertAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal USUARIO As String,  _
                    ByVal CLAVE As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRABA_CONVERSACION As Boolean,  _
                    ByVal DETECTA_PALABRAS As Boolean,  _
                    ByVal EMAIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal APELLIDO As String,  _
                    ByVal CAMBIA_CLAVE_PROX_LOGIN As Boolean,  _
                    ByVal SAL_CALLERID_PRESENTATION As Integer,  _
                    ByVal SAL_CALLERID As String,  _
                    ByVal SAL_RUTA As Integer,  _
                    ByVal SAL_PRECIO As Integer,  _
                    ByVal ENT_DNIS As String,  _
                    ByVal ENT_TIMEOUT As Integer,  _
                    ByVal ENT_LOCUCION As Integer,  _
                    ByVal FECHA_ALTA As Date,  _
                    ByVal DOMICILIO As String,  _
                    ByVal LOCALIDAD As String,  _
                    ByVal DNI As String,  _
                    ByVal IDPERFIL As Integer,  _
                    ByVal VERIFICA_PERMISOS As String,  _
                    ByVal userState As Object)
            If (Me.User_InsertOperationCompleted Is Nothing) Then
                Me.User_InsertOperationCompleted = AddressOf Me.OnUser_InsertOperationCompleted
            End If
            Me.InvokeAsync("User_Insert", New Object() {CLIENTE, USUARIO, CLAVE, TIPO, GRABA_CONVERSACION, DETECTA_PALABRAS, EMAIL, TELEFONO, NOMBRE, APELLIDO, CAMBIA_CLAVE_PROX_LOGIN, SAL_CALLERID_PRESENTATION, SAL_CALLERID, SAL_RUTA, SAL_PRECIO, ENT_DNIS, ENT_TIMEOUT, ENT_LOCUCION, FECHA_ALTA, DOMICILIO, LOCALIDAD, DNI, IDPERFIL, VERIFICA_PERMISOS}, Me.User_InsertOperationCompleted, userState)
        End Sub
        
        Private Sub OnUser_InsertOperationCompleted(ByVal arg As Object)
            If (Not (Me.User_InsertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent User_InsertCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/User_Update", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub User_Update( _
                    ByVal CLIENTE As String,  _
                    ByVal USUARIO As String,  _
                    ByVal CLAVE As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRABA_CONVERSACION As Boolean,  _
                    ByVal DETECTA_PALABRAS As Boolean,  _
                    ByVal EMAIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal APELLIDO As String,  _
                    ByVal CAMBIA_CLAVE_PROX_LOGIN As Boolean,  _
                    ByVal SAL_CALLERID_PRESENTATION As Integer,  _
                    ByVal SAL_CALLERID As String,  _
                    ByVal SAL_RUTA As Integer,  _
                    ByVal SAL_PRECIO As Integer,  _
                    ByVal ENT_DNIS As String,  _
                    ByVal ENT_TIMEOUT As Integer,  _
                    ByVal ENT_LOCUCION As Integer,  _
                    ByVal FECHA_ALTA As Date,  _
                    ByVal DOMICILIO As String,  _
                    ByVal LOCALIDAD As String,  _
                    ByVal DNI As String,  _
                    ByVal IDPERFIL As Integer,  _
                    ByVal VERIFICA_PERMISOS As Boolean)
            Me.Invoke("User_Update", New Object() {CLIENTE, USUARIO, CLAVE, TIPO, GRABA_CONVERSACION, DETECTA_PALABRAS, EMAIL, TELEFONO, NOMBRE, APELLIDO, CAMBIA_CLAVE_PROX_LOGIN, SAL_CALLERID_PRESENTATION, SAL_CALLERID, SAL_RUTA, SAL_PRECIO, ENT_DNIS, ENT_TIMEOUT, ENT_LOCUCION, FECHA_ALTA, DOMICILIO, LOCALIDAD, DNI, IDPERFIL, VERIFICA_PERMISOS})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_UpdateAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal USUARIO As String,  _
                    ByVal CLAVE As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRABA_CONVERSACION As Boolean,  _
                    ByVal DETECTA_PALABRAS As Boolean,  _
                    ByVal EMAIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal APELLIDO As String,  _
                    ByVal CAMBIA_CLAVE_PROX_LOGIN As Boolean,  _
                    ByVal SAL_CALLERID_PRESENTATION As Integer,  _
                    ByVal SAL_CALLERID As String,  _
                    ByVal SAL_RUTA As Integer,  _
                    ByVal SAL_PRECIO As Integer,  _
                    ByVal ENT_DNIS As String,  _
                    ByVal ENT_TIMEOUT As Integer,  _
                    ByVal ENT_LOCUCION As Integer,  _
                    ByVal FECHA_ALTA As Date,  _
                    ByVal DOMICILIO As String,  _
                    ByVal LOCALIDAD As String,  _
                    ByVal DNI As String,  _
                    ByVal IDPERFIL As Integer,  _
                    ByVal VERIFICA_PERMISOS As Boolean)
            Me.User_UpdateAsync(CLIENTE, USUARIO, CLAVE, TIPO, GRABA_CONVERSACION, DETECTA_PALABRAS, EMAIL, TELEFONO, NOMBRE, APELLIDO, CAMBIA_CLAVE_PROX_LOGIN, SAL_CALLERID_PRESENTATION, SAL_CALLERID, SAL_RUTA, SAL_PRECIO, ENT_DNIS, ENT_TIMEOUT, ENT_LOCUCION, FECHA_ALTA, DOMICILIO, LOCALIDAD, DNI, IDPERFIL, VERIFICA_PERMISOS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_UpdateAsync( _
                    ByVal CLIENTE As String,  _
                    ByVal USUARIO As String,  _
                    ByVal CLAVE As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRABA_CONVERSACION As Boolean,  _
                    ByVal DETECTA_PALABRAS As Boolean,  _
                    ByVal EMAIL As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal APELLIDO As String,  _
                    ByVal CAMBIA_CLAVE_PROX_LOGIN As Boolean,  _
                    ByVal SAL_CALLERID_PRESENTATION As Integer,  _
                    ByVal SAL_CALLERID As String,  _
                    ByVal SAL_RUTA As Integer,  _
                    ByVal SAL_PRECIO As Integer,  _
                    ByVal ENT_DNIS As String,  _
                    ByVal ENT_TIMEOUT As Integer,  _
                    ByVal ENT_LOCUCION As Integer,  _
                    ByVal FECHA_ALTA As Date,  _
                    ByVal DOMICILIO As String,  _
                    ByVal LOCALIDAD As String,  _
                    ByVal DNI As String,  _
                    ByVal IDPERFIL As Integer,  _
                    ByVal VERIFICA_PERMISOS As Boolean,  _
                    ByVal userState As Object)
            If (Me.User_UpdateOperationCompleted Is Nothing) Then
                Me.User_UpdateOperationCompleted = AddressOf Me.OnUser_UpdateOperationCompleted
            End If
            Me.InvokeAsync("User_Update", New Object() {CLIENTE, USUARIO, CLAVE, TIPO, GRABA_CONVERSACION, DETECTA_PALABRAS, EMAIL, TELEFONO, NOMBRE, APELLIDO, CAMBIA_CLAVE_PROX_LOGIN, SAL_CALLERID_PRESENTATION, SAL_CALLERID, SAL_RUTA, SAL_PRECIO, ENT_DNIS, ENT_TIMEOUT, ENT_LOCUCION, FECHA_ALTA, DOMICILIO, LOCALIDAD, DNI, IDPERFIL, VERIFICA_PERMISOS}, Me.User_UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUser_UpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.User_UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent User_UpdateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/User_Delete", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub User_Delete(ByVal CLIENTE As String, ByVal USUARIO As String)
            Me.Invoke("User_Delete", New Object() {CLIENTE, USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_DeleteAsync(ByVal CLIENTE As String, ByVal USUARIO As String)
            Me.User_DeleteAsync(CLIENTE, USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_DeleteAsync(ByVal CLIENTE As String, ByVal USUARIO As String, ByVal userState As Object)
            If (Me.User_DeleteOperationCompleted Is Nothing) Then
                Me.User_DeleteOperationCompleted = AddressOf Me.OnUser_DeleteOperationCompleted
            End If
            Me.InvokeAsync("User_Delete", New Object() {CLIENTE, USUARIO}, Me.User_DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUser_DeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.User_DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent User_DeleteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/User_ChangePassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub User_ChangePassword(ByVal CLIENTE As String, ByVal USUARIO As String, ByVal CLAVE As String)
            Me.Invoke("User_ChangePassword", New Object() {CLIENTE, USUARIO, CLAVE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_ChangePasswordAsync(ByVal CLIENTE As String, ByVal USUARIO As String, ByVal CLAVE As String)
            Me.User_ChangePasswordAsync(CLIENTE, USUARIO, CLAVE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_ChangePasswordAsync(ByVal CLIENTE As String, ByVal USUARIO As String, ByVal CLAVE As String, ByVal userState As Object)
            If (Me.User_ChangePasswordOperationCompleted Is Nothing) Then
                Me.User_ChangePasswordOperationCompleted = AddressOf Me.OnUser_ChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("User_ChangePassword", New Object() {CLIENTE, USUARIO, CLAVE}, Me.User_ChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnUser_ChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.User_ChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent User_ChangePasswordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/User_HasLicense", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function User_HasLicense(ByVal CLIENTE As String, ByVal USUARIO As String, ByVal API As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("User_HasLicense", New Object() {CLIENTE, USUARIO, API})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub User_HasLicenseAsync(ByVal CLIENTE As String, ByVal USUARIO As String, ByVal API As Boolean)
            Me.User_HasLicenseAsync(CLIENTE, USUARIO, API, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub User_HasLicenseAsync(ByVal CLIENTE As String, ByVal USUARIO As String, ByVal API As Boolean, ByVal userState As Object)
            If (Me.User_HasLicenseOperationCompleted Is Nothing) Then
                Me.User_HasLicenseOperationCompleted = AddressOf Me.OnUser_HasLicenseOperationCompleted
            End If
            Me.InvokeAsync("User_HasLicense", New Object() {CLIENTE, USUARIO, API}, Me.User_HasLicenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUser_HasLicenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.User_HasLicenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent User_HasLicenseCompleted(Me, New User_HasLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_CallerID_Campaign", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update_CallerID_Campaign(ByVal IdCampaign As Integer, ByVal callerId As String) As String
            Dim results() As Object = Me.Invoke("Update_CallerID_Campaign", New Object() {IdCampaign, callerId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Update_CallerID_CampaignAsync(ByVal IdCampaign As Integer, ByVal callerId As String)
            Me.Update_CallerID_CampaignAsync(IdCampaign, callerId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Update_CallerID_CampaignAsync(ByVal IdCampaign As Integer, ByVal callerId As String, ByVal userState As Object)
            If (Me.Update_CallerID_CampaignOperationCompleted Is Nothing) Then
                Me.Update_CallerID_CampaignOperationCompleted = AddressOf Me.OnUpdate_CallerID_CampaignOperationCompleted
            End If
            Me.InvokeAsync("Update_CallerID_Campaign", New Object() {IdCampaign, callerId}, Me.Update_CallerID_CampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdate_CallerID_CampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.Update_CallerID_CampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Update_CallerID_CampaignCompleted(Me, New Update_CallerID_CampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_Campaign", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update_Campaign(ByVal IdCampaign As Integer, ByVal Asterisk As Integer, ByVal Channels As Integer, ByVal callerTasaMax As Double) As String
            Dim results() As Object = Me.Invoke("Update_Campaign", New Object() {IdCampaign, Asterisk, Channels, callerTasaMax})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Update_CampaignAsync(ByVal IdCampaign As Integer, ByVal Asterisk As Integer, ByVal Channels As Integer, ByVal callerTasaMax As Double)
            Me.Update_CampaignAsync(IdCampaign, Asterisk, Channels, callerTasaMax, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Update_CampaignAsync(ByVal IdCampaign As Integer, ByVal Asterisk As Integer, ByVal Channels As Integer, ByVal callerTasaMax As Double, ByVal userState As Object)
            If (Me.Update_CampaignOperationCompleted Is Nothing) Then
                Me.Update_CampaignOperationCompleted = AddressOf Me.OnUpdate_CampaignOperationCompleted
            End If
            Me.InvokeAsync("Update_Campaign", New Object() {IdCampaign, Asterisk, Channels, callerTasaMax}, Me.Update_CampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdate_CampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.Update_CampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Update_CampaignCompleted(Me, New Update_CampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Login(ByVal DEVICE As String, ByVal USUARIO As String, ByVal CLAVE As String)
            Me.Invoke("Login", New Object() {DEVICE, USUARIO, CLAVE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal DEVICE As String, ByVal USUARIO As String, ByVal CLAVE As String)
            Me.LoginAsync(DEVICE, USUARIO, CLAVE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal DEVICE As String, ByVal USUARIO As String, ByVal CLAVE As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {DEVICE, USUARIO, CLAVE}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Logout", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Logout(ByVal USUARIO As String)
            Me.Invoke("Logout", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal USUARIO As String)
            Me.LogoutAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.LogoutOperationCompleted Is Nothing) Then
                Me.LogoutOperationCompleted = AddressOf Me.OnLogoutOperationCompleted
            End If
            Me.InvokeAsync("Logout", New Object() {USUARIO}, Me.LogoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Pause", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Pause(ByVal USUARIO As String, ByVal SUBTIPO_DESCANSO As Integer)
            Me.Invoke("Pause", New Object() {USUARIO, SUBTIPO_DESCANSO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PauseAsync(ByVal USUARIO As String, ByVal SUBTIPO_DESCANSO As Integer)
            Me.PauseAsync(USUARIO, SUBTIPO_DESCANSO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PauseAsync(ByVal USUARIO As String, ByVal SUBTIPO_DESCANSO As Integer, ByVal userState As Object)
            If (Me.PauseOperationCompleted Is Nothing) Then
                Me.PauseOperationCompleted = AddressOf Me.OnPauseOperationCompleted
            End If
            Me.InvokeAsync("Pause", New Object() {USUARIO, SUBTIPO_DESCANSO}, Me.PauseOperationCompleted, userState)
        End Sub
        
        Private Sub OnPauseOperationCompleted(ByVal arg As Object)
            If (Not (Me.PauseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PauseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Unpause", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Unpause(ByVal USUARIO As String)
            Me.Invoke("Unpause", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnpauseAsync(ByVal USUARIO As String)
            Me.UnpauseAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnpauseAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.UnpauseOperationCompleted Is Nothing) Then
                Me.UnpauseOperationCompleted = AddressOf Me.OnUnpauseOperationCompleted
            End If
            Me.InvokeAsync("Unpause", New Object() {USUARIO}, Me.UnpauseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnpauseOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnpauseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnpauseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login_Campaign", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Login_Campaign(ByVal USUARIO As String, ByVal CAMPAÑA As Integer)
            Me.Invoke("Login_Campaign", New Object() {USUARIO, CAMPAÑA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login_CampaignAsync(ByVal USUARIO As String, ByVal CAMPAÑA As Integer)
            Me.Login_CampaignAsync(USUARIO, CAMPAÑA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login_CampaignAsync(ByVal USUARIO As String, ByVal CAMPAÑA As Integer, ByVal userState As Object)
            If (Me.Login_CampaignOperationCompleted Is Nothing) Then
                Me.Login_CampaignOperationCompleted = AddressOf Me.OnLogin_CampaignOperationCompleted
            End If
            Me.InvokeAsync("Login_Campaign", New Object() {USUARIO, CAMPAÑA}, Me.Login_CampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogin_CampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.Login_CampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Login_CampaignCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Logout_Campaign", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Logout_Campaign(ByVal USUARIO As String)
            Me.Invoke("Logout_Campaign", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Logout_CampaignAsync(ByVal USUARIO As String)
            Me.Logout_CampaignAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Logout_CampaignAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.Logout_CampaignOperationCompleted Is Nothing) Then
                Me.Logout_CampaignOperationCompleted = AddressOf Me.OnLogout_CampaignOperationCompleted
            End If
            Me.InvokeAsync("Logout_Campaign", New Object() {USUARIO}, Me.Logout_CampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogout_CampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.Logout_CampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Logout_CampaignCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CRM_Available", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CRM_Available(ByVal USUARIO As String)
            Me.Invoke("CRM_Available", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_AvailableAsync(ByVal USUARIO As String)
            Me.CRM_AvailableAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_AvailableAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.CRM_AvailableOperationCompleted Is Nothing) Then
                Me.CRM_AvailableOperationCompleted = AddressOf Me.OnCRM_AvailableOperationCompleted
            End If
            Me.InvokeAsync("CRM_Available", New Object() {USUARIO}, Me.CRM_AvailableOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRM_AvailableOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRM_AvailableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRM_AvailableCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CRM_Unavailable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CRM_Unavailable(ByVal USUARIO As String) As Boolean
            Dim results() As Object = Me.Invoke("CRM_Unavailable", New Object() {USUARIO})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CRM_UnavailableAsync(ByVal USUARIO As String)
            Me.CRM_UnavailableAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_UnavailableAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.CRM_UnavailableOperationCompleted Is Nothing) Then
                Me.CRM_UnavailableOperationCompleted = AddressOf Me.OnCRM_UnavailableOperationCompleted
            End If
            Me.InvokeAsync("CRM_Unavailable", New Object() {USUARIO}, Me.CRM_UnavailableOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRM_UnavailableOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRM_UnavailableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRM_UnavailableCompleted(Me, New CRM_UnavailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CRM_ShowingContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CRM_ShowingContact(ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String)
            Me.Invoke("CRM_ShowingContact", New Object() {USUARIO, BASE, IDCONTACTO, DATA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_ShowingContactAsync(ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String)
            Me.CRM_ShowingContactAsync(USUARIO, BASE, IDCONTACTO, DATA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_ShowingContactAsync(ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal userState As Object)
            If (Me.CRM_ShowingContactOperationCompleted Is Nothing) Then
                Me.CRM_ShowingContactOperationCompleted = AddressOf Me.OnCRM_ShowingContactOperationCompleted
            End If
            Me.InvokeAsync("CRM_ShowingContact", New Object() {USUARIO, BASE, IDCONTACTO, DATA}, Me.CRM_ShowingContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRM_ShowingContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRM_ShowingContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRM_ShowingContactCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Dial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Dial(ByVal USUARIO As String, ByVal TELEFONO As String) As Boolean
            Dim results() As Object = Me.Invoke("Dial", New Object() {USUARIO, TELEFONO})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DialAsync(ByVal USUARIO As String, ByVal TELEFONO As String)
            Me.DialAsync(USUARIO, TELEFONO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DialAsync(ByVal USUARIO As String, ByVal TELEFONO As String, ByVal userState As Object)
            If (Me.DialOperationCompleted Is Nothing) Then
                Me.DialOperationCompleted = AddressOf Me.OnDialOperationCompleted
            End If
            Me.InvokeAsync("Dial", New Object() {USUARIO, TELEFONO}, Me.DialOperationCompleted, userState)
        End Sub
        
        Private Sub OnDialOperationCompleted(ByVal arg As Object)
            If (Not (Me.DialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DialCompleted(Me, New DialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateContact(ByVal CRM As Integer, ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal SUBCATEGORIA As Integer, ByVal XML_UPDATE As String, ByVal AGENDA As Boolean, ByVal FECHA_AGENDA As Date, ByVal USUARIO_AGENDA As String, ByVal TEL_AGENDA As String)
            Me.Invoke("UpdateContact", New Object() {CRM, USUARIO, BASE, IDCONTACTO, DATA, SUBCATEGORIA, XML_UPDATE, AGENDA, FECHA_AGENDA, USUARIO_AGENDA, TEL_AGENDA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal CRM As Integer, ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal SUBCATEGORIA As Integer, ByVal XML_UPDATE As String, ByVal AGENDA As Boolean, ByVal FECHA_AGENDA As Date, ByVal USUARIO_AGENDA As String, ByVal TEL_AGENDA As String)
            Me.UpdateContactAsync(CRM, USUARIO, BASE, IDCONTACTO, DATA, SUBCATEGORIA, XML_UPDATE, AGENDA, FECHA_AGENDA, USUARIO_AGENDA, TEL_AGENDA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal CRM As Integer, ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal SUBCATEGORIA As Integer, ByVal XML_UPDATE As String, ByVal AGENDA As Boolean, ByVal FECHA_AGENDA As Date, ByVal USUARIO_AGENDA As String, ByVal TEL_AGENDA As String, ByVal userState As Object)
            If (Me.UpdateContactOperationCompleted Is Nothing) Then
                Me.UpdateContactOperationCompleted = AddressOf Me.OnUpdateContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateContact", New Object() {CRM, USUARIO, BASE, IDCONTACTO, DATA, SUBCATEGORIA, XML_UPDATE, AGENDA, FECHA_AGENDA, USUARIO_AGENDA, TEL_AGENDA}, Me.UpdateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Hangup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Hangup(ByVal USUARIO As String)
            Me.Invoke("Hangup", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HangupAsync(ByVal USUARIO As String)
            Me.HangupAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HangupAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.HangupOperationCompleted Is Nothing) Then
                Me.HangupOperationCompleted = AddressOf Me.OnHangupOperationCompleted
            End If
            Me.InvokeAsync("Hangup", New Object() {USUARIO}, Me.HangupOperationCompleted, userState)
        End Sub
        
        Private Sub OnHangupOperationCompleted(ByVal arg As Object)
            If (Not (Me.HangupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HangupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartMonitor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub StartMonitor(ByVal USUARIO As String)
            Me.Invoke("StartMonitor", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartMonitorAsync(ByVal USUARIO As String)
            Me.StartMonitorAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartMonitorAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.StartMonitorOperationCompleted Is Nothing) Then
                Me.StartMonitorOperationCompleted = AddressOf Me.OnStartMonitorOperationCompleted
            End If
            Me.InvokeAsync("StartMonitor", New Object() {USUARIO}, Me.StartMonitorOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartMonitorOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartMonitorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartMonitorCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopMonitor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub StopMonitor(ByVal USUARIO As String)
            Me.Invoke("StopMonitor", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StopMonitorAsync(ByVal USUARIO As String)
            Me.StopMonitorAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StopMonitorAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.StopMonitorOperationCompleted Is Nothing) Then
                Me.StopMonitorOperationCompleted = AddressOf Me.OnStopMonitorOperationCompleted
            End If
            Me.InvokeAsync("StopMonitor", New Object() {USUARIO}, Me.StopMonitorOperationCompleted, userState)
        End Sub
        
        Private Sub OnStopMonitorOperationCompleted(ByVal arg As Object)
            If (Not (Me.StopMonitorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StopMonitorCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AttendedTransfer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AttendedTransfer(ByVal USUARIO As String, ByVal EXTENSION As String)
            Me.Invoke("AttendedTransfer", New Object() {USUARIO, EXTENSION})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttendedTransferAsync(ByVal USUARIO As String, ByVal EXTENSION As String)
            Me.AttendedTransferAsync(USUARIO, EXTENSION, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttendedTransferAsync(ByVal USUARIO As String, ByVal EXTENSION As String, ByVal userState As Object)
            If (Me.AttendedTransferOperationCompleted Is Nothing) Then
                Me.AttendedTransferOperationCompleted = AddressOf Me.OnAttendedTransferOperationCompleted
            End If
            Me.InvokeAsync("AttendedTransfer", New Object() {USUARIO, EXTENSION}, Me.AttendedTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnAttendedTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.AttendedTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AttendedTransferCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BlindTransfer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub BlindTransfer(ByVal USUARIO As String, ByVal EXTENSION As String)
            Me.Invoke("BlindTransfer", New Object() {USUARIO, EXTENSION})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BlindTransferAsync(ByVal USUARIO As String, ByVal EXTENSION As String)
            Me.BlindTransferAsync(USUARIO, EXTENSION, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BlindTransferAsync(ByVal USUARIO As String, ByVal EXTENSION As String, ByVal userState As Object)
            If (Me.BlindTransferOperationCompleted Is Nothing) Then
                Me.BlindTransferOperationCompleted = AddressOf Me.OnBlindTransferOperationCompleted
            End If
            Me.InvokeAsync("BlindTransfer", New Object() {USUARIO, EXTENSION}, Me.BlindTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnBlindTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.BlindTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BlindTransferCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AttendedTransferQueue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AttendedTransferQueue(ByVal USUARIO As String, ByVal COLA As Integer)
            Me.Invoke("AttendedTransferQueue", New Object() {USUARIO, COLA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttendedTransferQueueAsync(ByVal USUARIO As String, ByVal COLA As Integer)
            Me.AttendedTransferQueueAsync(USUARIO, COLA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttendedTransferQueueAsync(ByVal USUARIO As String, ByVal COLA As Integer, ByVal userState As Object)
            If (Me.AttendedTransferQueueOperationCompleted Is Nothing) Then
                Me.AttendedTransferQueueOperationCompleted = AddressOf Me.OnAttendedTransferQueueOperationCompleted
            End If
            Me.InvokeAsync("AttendedTransferQueue", New Object() {USUARIO, COLA}, Me.AttendedTransferQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnAttendedTransferQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.AttendedTransferQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AttendedTransferQueueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BlindTransferQueue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub BlindTransferQueue(ByVal USUARIO As String, ByVal COLA As Integer)
            Me.Invoke("BlindTransferQueue", New Object() {USUARIO, COLA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BlindTransferQueueAsync(ByVal USUARIO As String, ByVal COLA As Integer)
            Me.BlindTransferQueueAsync(USUARIO, COLA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BlindTransferQueueAsync(ByVal USUARIO As String, ByVal COLA As Integer, ByVal userState As Object)
            If (Me.BlindTransferQueueOperationCompleted Is Nothing) Then
                Me.BlindTransferQueueOperationCompleted = AddressOf Me.OnBlindTransferQueueOperationCompleted
            End If
            Me.InvokeAsync("BlindTransferQueue", New Object() {USUARIO, COLA}, Me.BlindTransferQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnBlindTransferQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.BlindTransferQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BlindTransferQueueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BlindTransferCampaign", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub BlindTransferCampaign(ByVal USUARIO As String, ByVal CAMPAÑA As Integer)
            Me.Invoke("BlindTransferCampaign", New Object() {USUARIO, CAMPAÑA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BlindTransferCampaignAsync(ByVal USUARIO As String, ByVal CAMPAÑA As Integer)
            Me.BlindTransferCampaignAsync(USUARIO, CAMPAÑA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BlindTransferCampaignAsync(ByVal USUARIO As String, ByVal CAMPAÑA As Integer, ByVal userState As Object)
            If (Me.BlindTransferCampaignOperationCompleted Is Nothing) Then
                Me.BlindTransferCampaignOperationCompleted = AddressOf Me.OnBlindTransferCampaignOperationCompleted
            End If
            Me.InvokeAsync("BlindTransferCampaign", New Object() {USUARIO, CAMPAÑA}, Me.BlindTransferCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnBlindTransferCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.BlindTransferCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BlindTransferCampaignCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/JoinConference", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub JoinConference(ByVal USUARIO As String)
            Me.Invoke("JoinConference", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub JoinConferenceAsync(ByVal USUARIO As String)
            Me.JoinConferenceAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub JoinConferenceAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.JoinConferenceOperationCompleted Is Nothing) Then
                Me.JoinConferenceOperationCompleted = AddressOf Me.OnJoinConferenceOperationCompleted
            End If
            Me.InvokeAsync("JoinConference", New Object() {USUARIO}, Me.JoinConferenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnJoinConferenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.JoinConferenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent JoinConferenceCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InviteParticipant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InviteParticipant(ByVal USUARIO As String, ByVal EXTENSION As String)
            Me.Invoke("InviteParticipant", New Object() {USUARIO, EXTENSION})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InviteParticipantAsync(ByVal USUARIO As String, ByVal EXTENSION As String)
            Me.InviteParticipantAsync(USUARIO, EXTENSION, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InviteParticipantAsync(ByVal USUARIO As String, ByVal EXTENSION As String, ByVal userState As Object)
            If (Me.InviteParticipantOperationCompleted Is Nothing) Then
                Me.InviteParticipantOperationCompleted = AddressOf Me.OnInviteParticipantOperationCompleted
            End If
            Me.InvokeAsync("InviteParticipant", New Object() {USUARIO, EXTENSION}, Me.InviteParticipantOperationCompleted, userState)
        End Sub
        
        Private Sub OnInviteParticipantOperationCompleted(ByVal arg As Object)
            If (Not (Me.InviteParticipantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InviteParticipantCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelInvitation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CancelInvitation(ByVal USUARIO As String)
            Me.Invoke("CancelInvitation", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelInvitationAsync(ByVal USUARIO As String)
            Me.CancelInvitationAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelInvitationAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.CancelInvitationOperationCompleted Is Nothing) Then
                Me.CancelInvitationOperationCompleted = AddressOf Me.OnCancelInvitationOperationCompleted
            End If
            Me.InvokeAsync("CancelInvitation", New Object() {USUARIO}, Me.CancelInvitationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelInvitationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelInvitationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelInvitationCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendDTMF", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SendDTMF(ByVal USUARIO As String, ByVal DIGITOS As String)
            Me.Invoke("SendDTMF", New Object() {USUARIO, DIGITOS})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDTMFAsync(ByVal USUARIO As String, ByVal DIGITOS As String)
            Me.SendDTMFAsync(USUARIO, DIGITOS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDTMFAsync(ByVal USUARIO As String, ByVal DIGITOS As String, ByVal userState As Object)
            If (Me.SendDTMFOperationCompleted Is Nothing) Then
                Me.SendDTMFOperationCompleted = AddressOf Me.OnSendDTMFOperationCompleted
            End If
            Me.InvokeAsync("SendDTMF", New Object() {USUARIO, DIGITOS}, Me.SendDTMFOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDTMFOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDTMFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDTMFCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Position", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Position(ByVal USUARIO As String) As String
            Dim results() As Object = Me.Invoke("Position", New Object() {USUARIO})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PositionAsync(ByVal USUARIO As String)
            Me.PositionAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PositionAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.PositionOperationCompleted Is Nothing) Then
                Me.PositionOperationCompleted = AddressOf Me.OnPositionOperationCompleted
            End If
            Me.InvokeAsync("Position", New Object() {USUARIO}, Me.PositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.PositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PositionCompleted(Me, New PositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/KickAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub KickAll(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Invoke("KickAll", New Object() {USUARIO, CONFERENCIA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KickAllAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.KickAllAsync(USUARIO, CONFERENCIA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KickAllAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal userState As Object)
            If (Me.KickAllOperationCompleted Is Nothing) Then
                Me.KickAllOperationCompleted = AddressOf Me.OnKickAllOperationCompleted
            End If
            Me.InvokeAsync("KickAll", New Object() {USUARIO, CONFERENCIA}, Me.KickAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnKickAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.KickAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KickAllCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/KickParticipant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub KickParticipant(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Invoke("KickParticipant", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KickParticipantAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.KickParticipantAsync(USUARIO, CONFERENCIA, PARTICIPANTE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KickParticipantAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer, ByVal userState As Object)
            If (Me.KickParticipantOperationCompleted Is Nothing) Then
                Me.KickParticipantOperationCompleted = AddressOf Me.OnKickParticipantOperationCompleted
            End If
            Me.InvokeAsync("KickParticipant", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE}, Me.KickParticipantOperationCompleted, userState)
        End Sub
        
        Private Sub OnKickParticipantOperationCompleted(ByVal arg As Object)
            If (Not (Me.KickParticipantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KickParticipantCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MuteAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub MuteAll(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Invoke("MuteAll", New Object() {USUARIO, CONFERENCIA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MuteAllAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.MuteAllAsync(USUARIO, CONFERENCIA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MuteAllAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal userState As Object)
            If (Me.MuteAllOperationCompleted Is Nothing) Then
                Me.MuteAllOperationCompleted = AddressOf Me.OnMuteAllOperationCompleted
            End If
            Me.InvokeAsync("MuteAll", New Object() {USUARIO, CONFERENCIA}, Me.MuteAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnMuteAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.MuteAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MuteAllCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MuteParticipant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub MuteParticipant(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Invoke("MuteParticipant", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MuteParticipantAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.MuteParticipantAsync(USUARIO, CONFERENCIA, PARTICIPANTE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MuteParticipantAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer, ByVal userState As Object)
            If (Me.MuteParticipantOperationCompleted Is Nothing) Then
                Me.MuteParticipantOperationCompleted = AddressOf Me.OnMuteParticipantOperationCompleted
            End If
            Me.InvokeAsync("MuteParticipant", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE}, Me.MuteParticipantOperationCompleted, userState)
        End Sub
        
        Private Sub OnMuteParticipantOperationCompleted(ByVal arg As Object)
            If (Not (Me.MuteParticipantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MuteParticipantCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnmuteAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UnmuteAll(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Invoke("UnmuteAll", New Object() {USUARIO, CONFERENCIA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnmuteAllAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.UnmuteAllAsync(USUARIO, CONFERENCIA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnmuteAllAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal userState As Object)
            If (Me.UnmuteAllOperationCompleted Is Nothing) Then
                Me.UnmuteAllOperationCompleted = AddressOf Me.OnUnmuteAllOperationCompleted
            End If
            Me.InvokeAsync("UnmuteAll", New Object() {USUARIO, CONFERENCIA}, Me.UnmuteAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnmuteAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnmuteAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnmuteAllCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnmuteParticipant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UnmuteParticipant(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Invoke("UnmuteParticipant", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnmuteParticipantAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.UnmuteParticipantAsync(USUARIO, CONFERENCIA, PARTICIPANTE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnmuteParticipantAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer, ByVal userState As Object)
            If (Me.UnmuteParticipantOperationCompleted Is Nothing) Then
                Me.UnmuteParticipantOperationCompleted = AddressOf Me.OnUnmuteParticipantOperationCompleted
            End If
            Me.InvokeAsync("UnmuteParticipant", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE}, Me.UnmuteParticipantOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnmuteParticipantOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnmuteParticipantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnmuteParticipantCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScreenApplicationStart", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ScreenApplicationStart()
            Me.Invoke("ScreenApplicationStart", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenApplicationStartAsync()
            Me.ScreenApplicationStartAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenApplicationStartAsync(ByVal userState As Object)
            If (Me.ScreenApplicationStartOperationCompleted Is Nothing) Then
                Me.ScreenApplicationStartOperationCompleted = AddressOf Me.OnScreenApplicationStartOperationCompleted
            End If
            Me.InvokeAsync("ScreenApplicationStart", New Object(-1) {}, Me.ScreenApplicationStartOperationCompleted, userState)
        End Sub
        
        Private Sub OnScreenApplicationStartOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScreenApplicationStartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScreenApplicationStartCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScreenApplicationStop", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ScreenApplicationStop()
            Me.Invoke("ScreenApplicationStop", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenApplicationStopAsync()
            Me.ScreenApplicationStopAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenApplicationStopAsync(ByVal userState As Object)
            If (Me.ScreenApplicationStopOperationCompleted Is Nothing) Then
                Me.ScreenApplicationStopOperationCompleted = AddressOf Me.OnScreenApplicationStopOperationCompleted
            End If
            Me.InvokeAsync("ScreenApplicationStop", New Object(-1) {}, Me.ScreenApplicationStopOperationCompleted, userState)
        End Sub
        
        Private Sub OnScreenApplicationStopOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScreenApplicationStopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScreenApplicationStopCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScreenStreamStart", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ScreenStreamStart(ByVal streamName As String)
            Me.Invoke("ScreenStreamStart", New Object() {streamName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenStreamStartAsync(ByVal streamName As String)
            Me.ScreenStreamStartAsync(streamName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenStreamStartAsync(ByVal streamName As String, ByVal userState As Object)
            If (Me.ScreenStreamStartOperationCompleted Is Nothing) Then
                Me.ScreenStreamStartOperationCompleted = AddressOf Me.OnScreenStreamStartOperationCompleted
            End If
            Me.InvokeAsync("ScreenStreamStart", New Object() {streamName}, Me.ScreenStreamStartOperationCompleted, userState)
        End Sub
        
        Private Sub OnScreenStreamStartOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScreenStreamStartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScreenStreamStartCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScreenStreamClose", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ScreenStreamClose(ByVal streamName As String)
            Me.Invoke("ScreenStreamClose", New Object() {streamName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenStreamCloseAsync(ByVal streamName As String)
            Me.ScreenStreamCloseAsync(streamName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenStreamCloseAsync(ByVal streamName As String, ByVal userState As Object)
            If (Me.ScreenStreamCloseOperationCompleted Is Nothing) Then
                Me.ScreenStreamCloseOperationCompleted = AddressOf Me.OnScreenStreamCloseOperationCompleted
            End If
            Me.InvokeAsync("ScreenStreamClose", New Object() {streamName}, Me.ScreenStreamCloseOperationCompleted, userState)
        End Sub
        
        Private Sub OnScreenStreamCloseOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScreenStreamCloseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScreenStreamCloseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScreenRecordStart", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ScreenRecordStart(ByVal streamName As String, ByVal fileName As String)
            Me.Invoke("ScreenRecordStart", New Object() {streamName, fileName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenRecordStartAsync(ByVal streamName As String, ByVal fileName As String)
            Me.ScreenRecordStartAsync(streamName, fileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenRecordStartAsync(ByVal streamName As String, ByVal fileName As String, ByVal userState As Object)
            If (Me.ScreenRecordStartOperationCompleted Is Nothing) Then
                Me.ScreenRecordStartOperationCompleted = AddressOf Me.OnScreenRecordStartOperationCompleted
            End If
            Me.InvokeAsync("ScreenRecordStart", New Object() {streamName, fileName}, Me.ScreenRecordStartOperationCompleted, userState)
        End Sub
        
        Private Sub OnScreenRecordStartOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScreenRecordStartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScreenRecordStartCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScreenRecordStop", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ScreenRecordStop(ByVal streamName As String, ByVal fileName As String)
            Me.Invoke("ScreenRecordStop", New Object() {streamName, fileName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenRecordStopAsync(ByVal streamName As String, ByVal fileName As String)
            Me.ScreenRecordStopAsync(streamName, fileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenRecordStopAsync(ByVal streamName As String, ByVal fileName As String, ByVal userState As Object)
            If (Me.ScreenRecordStopOperationCompleted Is Nothing) Then
                Me.ScreenRecordStopOperationCompleted = AddressOf Me.OnScreenRecordStopOperationCompleted
            End If
            Me.InvokeAsync("ScreenRecordStop", New Object() {streamName, fileName}, Me.ScreenRecordStopOperationCompleted, userState)
        End Sub
        
        Private Sub OnScreenRecordStopOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScreenRecordStopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScreenRecordStopCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScreenPacketReceived", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ScreenPacketReceived(ByVal streamName As String)
            Me.Invoke("ScreenPacketReceived", New Object() {streamName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenPacketReceivedAsync(ByVal streamName As String)
            Me.ScreenPacketReceivedAsync(streamName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScreenPacketReceivedAsync(ByVal streamName As String, ByVal userState As Object)
            If (Me.ScreenPacketReceivedOperationCompleted Is Nothing) Then
                Me.ScreenPacketReceivedOperationCompleted = AddressOf Me.OnScreenPacketReceivedOperationCompleted
            End If
            Me.InvokeAsync("ScreenPacketReceived", New Object() {streamName}, Me.ScreenPacketReceivedOperationCompleted, userState)
        End Sub
        
        Private Sub OnScreenPacketReceivedOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScreenPacketReceivedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScreenPacketReceivedCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login_Campaign2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Login_Campaign2(ByVal USUARIO As String, ByVal CAMPANA As Integer)
            Me.Invoke("Login_Campaign2", New Object() {USUARIO, CAMPANA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login_Campaign2Async(ByVal USUARIO As String, ByVal CAMPANA As Integer)
            Me.Login_Campaign2Async(USUARIO, CAMPANA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login_Campaign2Async(ByVal USUARIO As String, ByVal CAMPANA As Integer, ByVal userState As Object)
            If (Me.Login_Campaign2OperationCompleted Is Nothing) Then
                Me.Login_Campaign2OperationCompleted = AddressOf Me.OnLogin_Campaign2OperationCompleted
            End If
            Me.InvokeAsync("Login_Campaign2", New Object() {USUARIO, CAMPANA}, Me.Login_Campaign2OperationCompleted, userState)
        End Sub
        
        Private Sub OnLogin_Campaign2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Login_Campaign2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Login_Campaign2Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddScheduleCall", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddScheduleCall(ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal TELEFONO As String, ByVal FECHA_AGENDA As Date) As String
            Dim results() As Object = Me.Invoke("AddScheduleCall", New Object() {USUARIO, BASE, IDCONTACTO, DATA, TELEFONO, FECHA_AGENDA})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddScheduleCallAsync(ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal TELEFONO As String, ByVal FECHA_AGENDA As Date)
            Me.AddScheduleCallAsync(USUARIO, BASE, IDCONTACTO, DATA, TELEFONO, FECHA_AGENDA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddScheduleCallAsync(ByVal USUARIO As String, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal TELEFONO As String, ByVal FECHA_AGENDA As Date, ByVal userState As Object)
            If (Me.AddScheduleCallOperationCompleted Is Nothing) Then
                Me.AddScheduleCallOperationCompleted = AddressOf Me.OnAddScheduleCallOperationCompleted
            End If
            Me.InvokeAsync("AddScheduleCall", New Object() {USUARIO, BASE, IDCONTACTO, DATA, TELEFONO, FECHA_AGENDA}, Me.AddScheduleCallOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddScheduleCallOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddScheduleCallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddScheduleCallCompleted(Me, New AddScheduleCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CloseContact(ByVal BASE As Integer, ByVal IDCONTACTO As Integer)
            Me.Invoke("CloseContact", New Object() {BASE, IDCONTACTO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseContactAsync(ByVal BASE As Integer, ByVal IDCONTACTO As Integer)
            Me.CloseContactAsync(BASE, IDCONTACTO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseContactAsync(ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal userState As Object)
            If (Me.CloseContactOperationCompleted Is Nothing) Then
                Me.CloseContactOperationCompleted = AddressOf Me.OnCloseContactOperationCompleted
            End If
            Me.InvokeAsync("CloseContact", New Object() {BASE, IDCONTACTO}, Me.CloseContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseContactCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Descanso", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Descanso(ByVal USUARIO As String, <System.Xml.Serialization.XmlElementAttribute("DESCANSO")> ByVal DESCANSO1 As Boolean)
            Me.Invoke("Descanso", New Object() {USUARIO, DESCANSO1})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DescansoAsync(ByVal USUARIO As String, ByVal DESCANSO1 As Boolean)
            Me.DescansoAsync(USUARIO, DESCANSO1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DescansoAsync(ByVal USUARIO As String, ByVal DESCANSO1 As Boolean, ByVal userState As Object)
            If (Me.DescansoOperationCompleted Is Nothing) Then
                Me.DescansoOperationCompleted = AddressOf Me.OnDescansoOperationCompleted
            End If
            Me.InvokeAsync("Descanso", New Object() {USUARIO, DESCANSO1}, Me.DescansoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDescansoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DescansoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DescansoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Tiempo_Administrativo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Tiempo_Administrativo(ByVal USUARIO As String, ByVal TIEMPO_ADM As Boolean)
            Me.Invoke("Tiempo_Administrativo", New Object() {USUARIO, TIEMPO_ADM})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Tiempo_AdministrativoAsync(ByVal USUARIO As String, ByVal TIEMPO_ADM As Boolean)
            Me.Tiempo_AdministrativoAsync(USUARIO, TIEMPO_ADM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Tiempo_AdministrativoAsync(ByVal USUARIO As String, ByVal TIEMPO_ADM As Boolean, ByVal userState As Object)
            If (Me.Tiempo_AdministrativoOperationCompleted Is Nothing) Then
                Me.Tiempo_AdministrativoOperationCompleted = AddressOf Me.OnTiempo_AdministrativoOperationCompleted
            End If
            Me.InvokeAsync("Tiempo_Administrativo", New Object() {USUARIO, TIEMPO_ADM}, Me.Tiempo_AdministrativoOperationCompleted, userState)
        End Sub
        
        Private Sub OnTiempo_AdministrativoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Tiempo_AdministrativoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Tiempo_AdministrativoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login_Campaña", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Login_Campaña(ByVal USUARIO As String, ByVal CAMPAÑA As Integer)
            Me.Invoke("Login_Campaña", New Object() {USUARIO, CAMPAÑA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login_CampañaAsync(ByVal USUARIO As String, ByVal CAMPAÑA As Integer)
            Me.Login_CampañaAsync(USUARIO, CAMPAÑA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login_CampañaAsync(ByVal USUARIO As String, ByVal CAMPAÑA As Integer, ByVal userState As Object)
            If (Me.Login_CampañaOperationCompleted Is Nothing) Then
                Me.Login_CampañaOperationCompleted = AddressOf Me.OnLogin_CampañaOperationCompleted
            End If
            Me.InvokeAsync("Login_Campaña", New Object() {USUARIO, CAMPAÑA}, Me.Login_CampañaOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogin_CampañaOperationCompleted(ByVal arg As Object)
            If (Not (Me.Login_CampañaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Login_CampañaCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Logout_Campaña", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Logout_Campaña(ByVal USUARIO As String)
            Me.Invoke("Logout_Campaña", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Logout_CampañaAsync(ByVal USUARIO As String)
            Me.Logout_CampañaAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Logout_CampañaAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.Logout_CampañaOperationCompleted Is Nothing) Then
                Me.Logout_CampañaOperationCompleted = AddressOf Me.OnLogout_CampañaOperationCompleted
            End If
            Me.InvokeAsync("Logout_Campaña", New Object() {USUARIO}, Me.Logout_CampañaOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogout_CampañaOperationCompleted(ByVal arg As Object)
            If (Not (Me.Logout_CampañaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Logout_CampañaCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CRM_Disponible", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CRM_Disponible(ByVal USUARIO As String)
            Me.Invoke("CRM_Disponible", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_DisponibleAsync(ByVal USUARIO As String)
            Me.CRM_DisponibleAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_DisponibleAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.CRM_DisponibleOperationCompleted Is Nothing) Then
                Me.CRM_DisponibleOperationCompleted = AddressOf Me.OnCRM_DisponibleOperationCompleted
            End If
            Me.InvokeAsync("CRM_Disponible", New Object() {USUARIO}, Me.CRM_DisponibleOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRM_DisponibleOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRM_DisponibleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRM_DisponibleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CRM_No_Disponible", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CRM_No_Disponible(ByVal USUARIO As String)
            Me.Invoke("CRM_No_Disponible", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_No_DisponibleAsync(ByVal USUARIO As String)
            Me.CRM_No_DisponibleAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_No_DisponibleAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.CRM_No_DisponibleOperationCompleted Is Nothing) Then
                Me.CRM_No_DisponibleOperationCompleted = AddressOf Me.OnCRM_No_DisponibleOperationCompleted
            End If
            Me.InvokeAsync("CRM_No_Disponible", New Object() {USUARIO}, Me.CRM_No_DisponibleOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRM_No_DisponibleOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRM_No_DisponibleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRM_No_DisponibleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CRM_Mostrando_Contacto", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CRM_Mostrando_Contacto(ByVal USUARIO As String, ByVal IDCONTACTO As Integer, ByVal DATA As String)
            Me.Invoke("CRM_Mostrando_Contacto", New Object() {USUARIO, IDCONTACTO, DATA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_Mostrando_ContactoAsync(ByVal USUARIO As String, ByVal IDCONTACTO As Integer, ByVal DATA As String)
            Me.CRM_Mostrando_ContactoAsync(USUARIO, IDCONTACTO, DATA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_Mostrando_ContactoAsync(ByVal USUARIO As String, ByVal IDCONTACTO As Integer, ByVal DATA As String, ByVal userState As Object)
            If (Me.CRM_Mostrando_ContactoOperationCompleted Is Nothing) Then
                Me.CRM_Mostrando_ContactoOperationCompleted = AddressOf Me.OnCRM_Mostrando_ContactoOperationCompleted
            End If
            Me.InvokeAsync("CRM_Mostrando_Contacto", New Object() {USUARIO, IDCONTACTO, DATA}, Me.CRM_Mostrando_ContactoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRM_Mostrando_ContactoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRM_Mostrando_ContactoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRM_Mostrando_ContactoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CRM_Mostrando_Contacto_CRM_Interno", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CRM_Mostrando_Contacto_CRM_Interno(ByVal USUARIO As String, ByVal CRM As Integer, ByVal BASE As Integer, ByVal IDCONTACTO As Integer)
            Me.Invoke("CRM_Mostrando_Contacto_CRM_Interno", New Object() {USUARIO, CRM, BASE, IDCONTACTO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_Mostrando_Contacto_CRM_InternoAsync(ByVal USUARIO As String, ByVal CRM As Integer, ByVal BASE As Integer, ByVal IDCONTACTO As Integer)
            Me.CRM_Mostrando_Contacto_CRM_InternoAsync(USUARIO, CRM, BASE, IDCONTACTO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRM_Mostrando_Contacto_CRM_InternoAsync(ByVal USUARIO As String, ByVal CRM As Integer, ByVal BASE As Integer, ByVal IDCONTACTO As Integer, ByVal userState As Object)
            If (Me.CRM_Mostrando_Contacto_CRM_InternoOperationCompleted Is Nothing) Then
                Me.CRM_Mostrando_Contacto_CRM_InternoOperationCompleted = AddressOf Me.OnCRM_Mostrando_Contacto_CRM_InternoOperationCompleted
            End If
            Me.InvokeAsync("CRM_Mostrando_Contacto_CRM_Interno", New Object() {USUARIO, CRM, BASE, IDCONTACTO}, Me.CRM_Mostrando_Contacto_CRM_InternoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRM_Mostrando_Contacto_CRM_InternoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRM_Mostrando_Contacto_CRM_InternoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRM_Mostrando_Contacto_CRM_InternoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Discar", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Discar(ByVal USUARIO As String, ByVal TELEFONO As String)
            Me.Invoke("Discar", New Object() {USUARIO, TELEFONO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DiscarAsync(ByVal USUARIO As String, ByVal TELEFONO As String)
            Me.DiscarAsync(USUARIO, TELEFONO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DiscarAsync(ByVal USUARIO As String, ByVal TELEFONO As String, ByVal userState As Object)
            If (Me.DiscarOperationCompleted Is Nothing) Then
                Me.DiscarOperationCompleted = AddressOf Me.OnDiscarOperationCompleted
            End If
            Me.InvokeAsync("Discar", New Object() {USUARIO, TELEFONO}, Me.DiscarOperationCompleted, userState)
        End Sub
        
        Private Sub OnDiscarOperationCompleted(ByVal arg As Object)
            If (Not (Me.DiscarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DiscarCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Cortar", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Cortar(ByVal USUARIO As String)
            Me.Invoke("Cortar", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CortarAsync(ByVal USUARIO As String)
            Me.CortarAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CortarAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.CortarOperationCompleted Is Nothing) Then
                Me.CortarOperationCompleted = AddressOf Me.OnCortarOperationCompleted
            End If
            Me.InvokeAsync("Cortar", New Object() {USUARIO}, Me.CortarOperationCompleted, userState)
        End Sub
        
        Private Sub OnCortarOperationCompleted(ByVal arg As Object)
            If (Not (Me.CortarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CortarCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Iniciar_Grabacion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Iniciar_Grabacion(ByVal USUARIO As String)
            Me.Invoke("Iniciar_Grabacion", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Iniciar_GrabacionAsync(ByVal USUARIO As String)
            Me.Iniciar_GrabacionAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Iniciar_GrabacionAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.Iniciar_GrabacionOperationCompleted Is Nothing) Then
                Me.Iniciar_GrabacionOperationCompleted = AddressOf Me.OnIniciar_GrabacionOperationCompleted
            End If
            Me.InvokeAsync("Iniciar_Grabacion", New Object() {USUARIO}, Me.Iniciar_GrabacionOperationCompleted, userState)
        End Sub
        
        Private Sub OnIniciar_GrabacionOperationCompleted(ByVal arg As Object)
            If (Not (Me.Iniciar_GrabacionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Iniciar_GrabacionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Detener_Grabacion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Detener_Grabacion(ByVal USUARIO As String)
            Me.Invoke("Detener_Grabacion", New Object() {USUARIO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Detener_GrabacionAsync(ByVal USUARIO As String)
            Me.Detener_GrabacionAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Detener_GrabacionAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.Detener_GrabacionOperationCompleted Is Nothing) Then
                Me.Detener_GrabacionOperationCompleted = AddressOf Me.OnDetener_GrabacionOperationCompleted
            End If
            Me.InvokeAsync("Detener_Grabacion", New Object() {USUARIO}, Me.Detener_GrabacionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDetener_GrabacionOperationCompleted(ByVal arg As Object)
            If (Not (Me.Detener_GrabacionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Detener_GrabacionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Posicion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Posicion(ByVal USUARIO As String) As String
            Dim results() As Object = Me.Invoke("Posicion", New Object() {USUARIO})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PosicionAsync(ByVal USUARIO As String)
            Me.PosicionAsync(USUARIO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PosicionAsync(ByVal USUARIO As String, ByVal userState As Object)
            If (Me.PosicionOperationCompleted Is Nothing) Then
                Me.PosicionOperationCompleted = AddressOf Me.OnPosicionOperationCompleted
            End If
            Me.InvokeAsync("Posicion", New Object() {USUARIO}, Me.PosicionOperationCompleted, userState)
        End Sub
        
        Private Sub OnPosicionOperationCompleted(ByVal arg As Object)
            If (Not (Me.PosicionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PosicionCompleted(Me, New PosicionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Expulsar_Todos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Expulsar_Todos(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Invoke("Expulsar_Todos", New Object() {USUARIO, CONFERENCIA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Expulsar_TodosAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Expulsar_TodosAsync(USUARIO, CONFERENCIA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Expulsar_TodosAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal userState As Object)
            If (Me.Expulsar_TodosOperationCompleted Is Nothing) Then
                Me.Expulsar_TodosOperationCompleted = AddressOf Me.OnExpulsar_TodosOperationCompleted
            End If
            Me.InvokeAsync("Expulsar_Todos", New Object() {USUARIO, CONFERENCIA}, Me.Expulsar_TodosOperationCompleted, userState)
        End Sub
        
        Private Sub OnExpulsar_TodosOperationCompleted(ByVal arg As Object)
            If (Not (Me.Expulsar_TodosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Expulsar_TodosCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Expulsar_Participante", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Expulsar_Participante(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Invoke("Expulsar_Participante", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Expulsar_ParticipanteAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Expulsar_ParticipanteAsync(USUARIO, CONFERENCIA, PARTICIPANTE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Expulsar_ParticipanteAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer, ByVal userState As Object)
            If (Me.Expulsar_ParticipanteOperationCompleted Is Nothing) Then
                Me.Expulsar_ParticipanteOperationCompleted = AddressOf Me.OnExpulsar_ParticipanteOperationCompleted
            End If
            Me.InvokeAsync("Expulsar_Participante", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE}, Me.Expulsar_ParticipanteOperationCompleted, userState)
        End Sub
        
        Private Sub OnExpulsar_ParticipanteOperationCompleted(ByVal arg As Object)
            If (Not (Me.Expulsar_ParticipanteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Expulsar_ParticipanteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Silenciar_Todos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Silenciar_Todos(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Invoke("Silenciar_Todos", New Object() {USUARIO, CONFERENCIA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Silenciar_TodosAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Silenciar_TodosAsync(USUARIO, CONFERENCIA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Silenciar_TodosAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal userState As Object)
            If (Me.Silenciar_TodosOperationCompleted Is Nothing) Then
                Me.Silenciar_TodosOperationCompleted = AddressOf Me.OnSilenciar_TodosOperationCompleted
            End If
            Me.InvokeAsync("Silenciar_Todos", New Object() {USUARIO, CONFERENCIA}, Me.Silenciar_TodosOperationCompleted, userState)
        End Sub
        
        Private Sub OnSilenciar_TodosOperationCompleted(ByVal arg As Object)
            If (Not (Me.Silenciar_TodosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Silenciar_TodosCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Silenciar_Participante", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Silenciar_Participante(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Invoke("Silenciar_Participante", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Silenciar_ParticipanteAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer)
            Me.Silenciar_ParticipanteAsync(USUARIO, CONFERENCIA, PARTICIPANTE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Silenciar_ParticipanteAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal PARTICIPANTE As Integer, ByVal userState As Object)
            If (Me.Silenciar_ParticipanteOperationCompleted Is Nothing) Then
                Me.Silenciar_ParticipanteOperationCompleted = AddressOf Me.OnSilenciar_ParticipanteOperationCompleted
            End If
            Me.InvokeAsync("Silenciar_Participante", New Object() {USUARIO, CONFERENCIA, PARTICIPANTE}, Me.Silenciar_ParticipanteOperationCompleted, userState)
        End Sub
        
        Private Sub OnSilenciar_ParticipanteOperationCompleted(ByVal arg As Object)
            If (Not (Me.Silenciar_ParticipanteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Silenciar_ParticipanteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Dessilenciar_Todos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Dessilenciar_Todos(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Invoke("Dessilenciar_Todos", New Object() {USUARIO, CONFERENCIA})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Dessilenciar_TodosAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer)
            Me.Dessilenciar_TodosAsync(USUARIO, CONFERENCIA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Dessilenciar_TodosAsync(ByVal USUARIO As String, ByVal CONFERENCIA As Integer, ByVal userState As Object)
            If (Me.Dessilenciar_TodosOperationCompleted Is Nothing) Then
                Me.Dessilenciar_TodosOperationCompleted = AddressOf Me.OnDessilenciar_TodosOperationCompleted
            End If
            Me.InvokeAsync("Dessilenciar_Todos", New Object() {USUARIO, CONFERENCIA}, Me.Dessilenciar_TodosOperationCompleted, userState)
        End Sub
        
        Private Sub OnDessilenciar_TodosOperationCompleted(ByVal arg As Object)
            If (Not (Me.Dessilenciar_TodosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Dessilenciar_TodosCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="", IsNullable:=false)>  _
    Partial Public Class Authentication
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private usernameField As String
        
        Private passwordField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Dessilenciar_ParticipanteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveRemoteImageCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIpCountryCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetIpCountryCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIpCountryCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask00CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask00CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask00CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask01CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask01CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask01CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask02CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask02CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask02CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask03CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask03CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask03CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask04CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask04CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask04CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask05CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask05CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask05CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask06CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask06CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask06CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask07CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask07CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask07CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask08CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask08CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask08CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask09CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask09CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask09CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask10CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask10CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask10CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask11CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask11CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask11CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask12CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask12CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask12CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask13CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask13CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask13CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask14CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask14CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask14CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask15CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask15CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask15CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask16CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask16CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask16CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask17CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask17CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask17CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask18CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask18CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask18CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask19CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask19CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask19CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteTask20CompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteTask20CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteTask20CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddHostExceptionTelCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RemoveHostExceptionTelCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddInternetExceptionTelCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RemoveInternetExceptionTelCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddHostExceptionWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RemoveHostExceptionWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddInternetExceptionWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RemoveInternetExceptionWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReloadBlockedIncomingCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReloadBlockedOutgoingCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Device_InsertCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Device_UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Device_DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIdiomaCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIdiomaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIdiomaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub User_InsertCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub User_UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub User_DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub User_ChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub User_HasLicenseCompletedEventHandler(ByVal sender As Object, ByVal e As User_HasLicenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class User_HasLicenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Update_CallerID_CampaignCompletedEventHandler(ByVal sender As Object, ByVal e As Update_CallerID_CampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Update_CallerID_CampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Update_CampaignCompletedEventHandler(ByVal sender As Object, ByVal e As Update_CampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Update_CampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub LogoutCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PauseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UnpauseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Login_CampaignCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Logout_CampaignCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CRM_AvailableCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CRM_UnavailableCompletedEventHandler(ByVal sender As Object, ByVal e As CRM_UnavailableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CRM_UnavailableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CRM_ShowingContactCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DialCompletedEventHandler(ByVal sender As Object, ByVal e As DialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateContactCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HangupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub StartMonitorCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub StopMonitorCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AttendedTransferCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub BlindTransferCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AttendedTransferQueueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub BlindTransferQueueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub BlindTransferCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub JoinConferenceCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InviteParticipantCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CancelInvitationCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendDTMFCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PositionCompletedEventHandler(ByVal sender As Object, ByVal e As PositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub KickAllCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub KickParticipantCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub MuteAllCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub MuteParticipantCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UnmuteAllCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UnmuteParticipantCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ScreenApplicationStartCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ScreenApplicationStopCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ScreenStreamStartCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ScreenStreamCloseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ScreenRecordStartCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ScreenRecordStopCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ScreenPacketReceivedCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Login_Campaign2CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddScheduleCallCompletedEventHandler(ByVal sender As Object, ByVal e As AddScheduleCallCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddScheduleCallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CloseContactCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DescansoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Tiempo_AdministrativoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Login_CampañaCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Logout_CampañaCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CRM_DisponibleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CRM_No_DisponibleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CRM_Mostrando_ContactoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CRM_Mostrando_Contacto_CRM_InternoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DiscarCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CortarCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Iniciar_GrabacionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Detener_GrabacionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PosicionCompletedEventHandler(ByVal sender As Object, ByVal e As PosicionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PosicionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Expulsar_TodosCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Expulsar_ParticipanteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Silenciar_TodosCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Silenciar_ParticipanteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Dessilenciar_TodosCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
